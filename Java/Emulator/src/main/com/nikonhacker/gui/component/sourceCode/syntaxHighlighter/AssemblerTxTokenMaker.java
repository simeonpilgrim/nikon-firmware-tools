/* The following code was generated by JFlex 1.4.3 on 07.09.13 23:13 */

/*
 * AssemblerTxTokenMaker.java - An object that can take a chunk of text and
 * return a linked list of tokens representing Toshiba Tx assembler.
 * Based on AssemblerX86TokenMaker.java by Robert Futrell
 */
package com.nikonhacker.gui.component.sourceCode.syntaxHighlighter;

import org.fife.ui.rsyntaxtextarea.AbstractJFlexTokenMaker;
import org.fife.ui.rsyntaxtextarea.DefaultToken;
import org.fife.ui.rsyntaxtextarea.Token;
import org.fife.ui.rsyntaxtextarea.TokenMaker;

import javax.swing.text.Segment;
import java.io.IOException;


/**
 * This class takes plain text and returns tokens representing Tx
 * assembler.<p>
 *
 * This implementation was created using
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1; however, the generated file
 * was modified for performance.  Memory allocation needs to be almost
 * completely removed to be competitive with the handwritten lexers (subclasses
 * of <code>AbstractTokenMaker</code>, so this class has been modified so that
 * Strings are never allocated (via yytext()), and the scanner never has to
 * worry about refilling its buffer (needlessly copying chars around).
 * We can achieve this because RText always scans exactly 1 line of tokens at a
 * time, and hands the scanner this line as an array of characters (a Segment
 * really).  Since tokens contain pointers to char arrays instead of Strings
 * holding their contents, there is no need for allocating new memory for
 * Strings.<p>
 *
 * The actual algorithm generated for scanning has, of course, not been
 * modified.<p>
 *
 * If you wish to regenerate this file yourself, keep in mind the following:
 * <ul>
 *   <li>The generated AssemblerTxTokenMaker.java</code> file will contain two
 *       definitions of both <code>zzRefill</code> and <code>yyreset</code>.
 *       You should hand-delete the second of each definition (the ones
 *       generated by the lexer), as these generated methods modify the input
 *       buffer, which we'll never have to do.</li>
 *   <li>You should also change the declaration/definition of zzBuffer to NOT
 *       be initialized.  This is a needless memory allocation for us since we
 *       will be pointing the array somewhere else anyway.</li>
 *   <li>You should NOT call <code>yylex()</code> on the generated scanner
 *       directly; rather, you should use <code>getTokenList</code> as you would
 *       with any other <code>TokenMaker</code> instance.</li>
 * </ul>
 *
 * @author Robert Futrell
 * @version 0.2
 *
 */

public class AssemblerTxTokenMaker extends AbstractJFlexTokenMaker implements TokenMaker {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\11\1\10\1\0\1\11\23\0\1\11\1\14\1\5\1\0"+
    "\1\51\1\13\1\14\1\6\2\0\1\13\1\13\1\4\1\13\1\4"+
    "\1\13\1\17\1\34\1\52\1\53\1\50\1\2\1\2\1\2\1\50"+
    "\1\2\1\12\1\7\1\14\1\14\1\14\2\0\1\15\1\24\1\16"+
    "\1\22\1\27\1\3\1\44\1\42\1\20\1\47\1\33\1\25\1\37"+
    "\1\23\1\35\1\40\1\46\1\26\1\32\1\31\1\21\1\41\1\43"+
    "\1\30\1\45\1\36\1\4\1\0\1\4\1\14\1\1\1\0\1\15"+
    "\1\24\1\16\1\22\1\27\1\3\1\44\1\42\1\20\1\47\1\33"+
    "\1\25\1\37\1\23\1\35\1\40\1\46\1\26\1\32\1\31\1\21"+
    "\1\41\1\43\1\30\1\45\1\36\1\0\1\14\1\0\1\14\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\4\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\4\1\1\10\14\1\1\10\1\1\1\0\1\11\3\0"+
    "\1\12\1\0\1\13\1\14\10\0\1\15\1\16\1\0"+
    "\2\15\16\0\1\16\1\0\2\16\1\0\2\12\13\0"+
    "\1\16\5\0\1\16\1\0\1\16\11\0\1\10\1\0"+
    "\2\1\1\11\1\0\3\1\1\16\3\1\1\16\2\1"+
    "\1\10\2\1\1\10\13\1\1\10\1\1\1\10\4\1"+
    "\2\16\11\1\1\16\3\1\1\10\3\12\2\17\1\1"+
    "\1\16\1\1\2\10\2\1\1\20\2\1\1\10\3\1"+
    "\1\0\6\1\1\0\2\1\1\0\1\1\2\21";

  private static int [] zzUnpackAction() {
    int [] result = new int[189];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\54\0\130\0\204\0\260\0\334\0\u0108\0\u0134"+
    "\0\54\0\u0160\0\54\0\u018c\0\u01b8\0\u01e4\0\u0210\0\u023c"+
    "\0\u0268\0\u0294\0\u02c0\0\u02ec\0\u0318\0\u0344\0\u0370\0\u039c"+
    "\0\u03c8\0\u03f4\0\u0420\0\u044c\0\u0478\0\u04a4\0\u04d0\0\54"+
    "\0\u04fc\0\u0528\0\u0554\0\u04d0\0\u0580\0\54\0\54\0\u05ac"+
    "\0\u05d8\0\u0604\0\u0630\0\u065c\0\u0688\0\u06b4\0\u06e0\0\u0554"+
    "\0\u070c\0\u0738\0\u04d0\0\u0580\0\u0764\0\u0790\0\u07bc\0\u07e8"+
    "\0\u0814\0\u0840\0\u086c\0\u0898\0\u08c4\0\u08f0\0\u091c\0\u0948"+
    "\0\u0974\0\u09a0\0\u04d0\0\u09cc\0\u09f8\0\u0a24\0\u0a50\0\u0a7c"+
    "\0\u0aa8\0\u0ad4\0\u0b00\0\u0b2c\0\u0b58\0\u0b84\0\u0bb0\0\u0bdc"+
    "\0\u0c08\0\u0c34\0\u0c60\0\u0c8c\0\u0b84\0\u0cb8\0\u0ce4\0\u0d10"+
    "\0\u0d3c\0\u0d68\0\u0d94\0\u0dc0\0\u09cc\0\u0dec\0\u0e18\0\u0e44"+
    "\0\u0e70\0\u0e9c\0\u0ec8\0\u0ef4\0\u0f20\0\u0f4c\0\u0f78\0\u0fa4"+
    "\0\u0fd0\0\u04d0\0\u0fd0\0\u0ffc\0\u1028\0\u0f20\0\u1054\0\u1080"+
    "\0\u10ac\0\u10d8\0\u1104\0\u1130\0\u0ad4\0\u0840\0\u04d0\0\u115c"+
    "\0\u1188\0\u11b4\0\u11e0\0\u120c\0\u1238\0\u1264\0\u1290\0\u12bc"+
    "\0\u12e8\0\u1314\0\u1340\0\u136c\0\u1398\0\u13c4\0\u09a0\0\u13f0"+
    "\0\u141c\0\u1448\0\u1474\0\u0580\0\u14a0\0\u14cc\0\u14f8\0\u1524"+
    "\0\u1550\0\u157c\0\u15a8\0\u15d4\0\u1600\0\u09cc\0\u162c\0\u1658"+
    "\0\u0c60\0\u1684\0\u16b0\0\u16dc\0\54\0\u1708\0\u1734\0\u1760"+
    "\0\u178c\0\u09f8\0\u178c\0\u17b8\0\u17e4\0\u1810\0\u183c\0\u1868"+
    "\0\u04d0\0\u1894\0\u18c0\0\u18ec\0\u1918\0\u1944\0\u1970\0\u199c"+
    "\0\u19c8\0\u19f4\0\u1a20\0\u1a4c\0\u1a78\0\u1aa4\0\u1ad0\0\u1afc"+
    "\0\u1b28\0\u1b54\0\u1b80\0\u04fc\0\u04d0";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[189];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\2\1\6\1\7\1\10"+
    "\1\11\1\12\1\2\2\13\1\14\1\15\1\4\2\3"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\3\1\4\1\27\1\30\1\31\1\32\2\3"+
    "\1\33\2\3\1\34\1\35\1\4\1\36\2\4\55\0"+
    "\3\37\6\0\1\40\2\0\34\37\1\0\2\37\1\0"+
    "\1\41\2\42\6\0\1\40\2\0\3\42\2\41\1\42"+
    "\1\41\1\42\2\41\1\42\4\41\1\42\13\41\1\42"+
    "\1\0\2\42\1\0\1\37\2\43\6\0\1\40\2\0"+
    "\3\43\2\37\1\43\1\37\1\43\2\37\1\43\4\37"+
    "\1\43\3\37\1\44\2\37\1\45\4\37\1\43\1\0"+
    "\2\43\5\6\1\46\46\6\6\7\1\47\45\7\10\10"+
    "\1\0\43\10\11\0\1\12\43\0\1\37\2\43\6\0"+
    "\1\40\2\0\1\43\1\50\1\43\2\37\1\51\1\52"+
    "\1\43\2\37\1\43\4\37\1\43\13\37\1\43\1\0"+
    "\2\43\1\0\1\37\1\43\1\53\6\0\1\40\2\0"+
    "\1\54\2\43\2\37\1\43\1\37\1\43\1\55\1\37"+
    "\1\43\1\37\1\56\2\37\1\43\2\37\1\57\10\37"+
    "\1\43\1\0\2\43\1\0\1\37\1\43\1\60\6\0"+
    "\1\40\2\0\3\43\1\61\1\37\1\60\1\37\1\60"+
    "\2\37\1\62\1\37\1\63\2\37\1\43\6\37\1\64"+
    "\2\37\1\63\1\37\1\43\1\0\2\43\1\0\3\37"+
    "\6\0\1\40\2\0\12\37\1\65\5\37\1\66\13\37"+
    "\1\0\2\37\1\0\1\37\1\43\1\67\6\0\1\40"+
    "\2\0\1\70\1\71\1\43\1\72\1\37\1\43\1\73"+
    "\1\43\1\74\1\75\1\76\1\37\1\77\1\100\1\37"+
    "\1\43\7\37\1\101\1\102\2\37\1\43\1\0\2\43"+
    "\1\0\3\37\6\0\1\40\2\0\3\37\1\103\1\104"+
    "\2\37\1\105\15\37\1\105\1\106\5\37\1\0\2\37"+
    "\1\0\1\37\1\44\1\37\6\0\1\40\2\0\1\44"+
    "\1\37\1\44\7\37\1\107\4\37\1\110\13\37\1\44"+
    "\1\0\1\110\1\111\1\0\1\37\2\43\6\0\1\40"+
    "\2\0\3\43\1\103\1\37\1\43\1\37\1\43\1\37"+
    "\1\112\1\43\4\37\1\43\3\37\1\113\7\37\1\43"+
    "\1\0\2\43\1\0\3\37\6\0\1\40\2\0\20\37"+
    "\1\114\13\37\1\0\2\37\1\0\3\37\6\0\1\40"+
    "\2\0\6\37\1\115\1\116\1\117\1\37\1\120\13\37"+
    "\1\45\1\121\4\37\1\0\2\37\1\0\3\37\6\0"+
    "\1\40\2\0\1\122\3\37\1\123\1\124\1\37\1\125"+
    "\1\126\1\127\1\130\1\37\1\131\1\132\5\37\1\44"+
    "\1\37\1\103\1\133\1\37\1\134\3\37\1\0\2\37"+
    "\1\0\3\37\6\0\1\40\2\0\11\37\1\135\22\37"+
    "\1\0\2\37\1\0\3\37\6\0\1\40\2\0\12\37"+
    "\1\130\21\37\1\0\2\37\1\0\2\37\1\136\6\0"+
    "\1\40\2\0\1\137\2\37\1\140\1\141\7\37\1\136"+
    "\1\142\2\37\1\143\13\37\1\0\2\37\1\0\3\37"+
    "\6\0\1\40\2\0\1\37\1\44\32\37\1\0\2\37"+
    "\1\0\3\37\6\0\1\40\2\0\1\144\17\37\1\145"+
    "\13\37\1\0\2\37\1\0\3\37\6\0\1\40\2\0"+
    "\26\37\1\45\5\37\1\0\2\37\1\0\3\37\6\0"+
    "\1\40\2\0\1\146\10\37\1\147\22\37\1\0\2\37"+
    "\3\0\1\150\50\0\1\151\3\152\1\0\3\151\2\0"+
    "\1\153\1\0\1\151\34\152\1\151\2\152\1\0\3\41"+
    "\6\0\1\40\2\0\34\41\1\0\2\41\1\0\1\41"+
    "\2\154\6\0\1\40\2\0\3\154\2\41\1\154\1\41"+
    "\1\154\2\41\1\154\4\41\1\154\13\41\1\154\1\0"+
    "\2\154\1\151\1\152\2\155\1\0\3\151\2\0\1\153"+
    "\1\0\1\151\3\155\2\152\1\155\1\152\1\155\2\152"+
    "\1\155\4\152\1\155\13\152\1\155\1\151\2\155\1\151"+
    "\3\152\1\0\3\151\2\0\1\153\1\0\1\151\20\152"+
    "\1\156\13\152\1\151\2\152\1\151\1\152\2\155\1\0"+
    "\3\151\2\0\1\153\1\0\1\151\2\155\1\157\2\152"+
    "\1\155\1\152\1\155\2\152\1\155\4\152\1\155\13\152"+
    "\1\155\1\151\2\155\1\151\1\152\2\155\1\0\3\151"+
    "\2\0\1\153\1\0\1\151\3\155\2\152\1\160\1\152"+
    "\1\155\2\152\1\155\4\152\1\155\13\152\1\155\1\151"+
    "\2\155\1\151\3\152\1\0\3\151\2\0\1\153\1\0"+
    "\1\151\5\152\1\135\26\152\1\151\2\152\1\151\1\152"+
    "\2\155\1\0\3\151\2\0\1\153\1\0\1\151\1\155"+
    "\1\161\1\155\2\152\1\155\1\152\1\155\2\152\1\155"+
    "\4\152\1\155\13\152\1\155\1\151\2\155\1\151\1\152"+
    "\2\155\1\0\3\151\2\0\1\153\1\0\1\151\3\155"+
    "\1\152\1\162\1\155\1\152\1\155\2\152\1\155\4\152"+
    "\1\155\13\152\1\155\1\151\2\155\1\151\3\152\1\0"+
    "\3\151\2\0\1\153\1\0\1\151\20\152\2\103\12\152"+
    "\1\151\2\152\1\151\3\152\1\0\3\151\2\0\1\153"+
    "\1\0\1\151\1\152\1\163\32\152\1\151\2\152\1\151"+
    "\3\152\1\0\3\151\2\0\1\153\1\0\1\151\23\152"+
    "\1\135\10\152\1\151\2\152\1\151\3\152\1\0\3\151"+
    "\2\0\1\153\1\0\1\151\24\152\1\164\7\152\1\151"+
    "\2\152\1\151\1\152\2\155\1\0\3\151\2\0\1\153"+
    "\1\0\1\151\3\155\2\152\1\155\1\152\1\155\1\152"+
    "\1\165\1\155\4\152\1\155\13\152\1\155\1\151\2\155"+
    "\1\151\3\152\1\0\3\151\2\0\1\153\1\0\1\151"+
    "\27\152\1\103\4\152\1\151\2\152\1\151\3\152\1\0"+
    "\3\151\2\0\1\153\1\0\1\151\11\152\1\103\2\152"+
    "\1\103\6\152\1\103\10\152\1\151\2\152\1\151\1\152"+
    "\2\155\1\0\3\151\2\0\1\153\1\0\1\151\3\155"+
    "\1\166\1\152\1\155\1\152\1\155\2\152\1\155\4\152"+
    "\1\155\13\152\1\155\1\151\2\155\1\151\1\152\2\155"+
    "\1\0\3\151\2\0\1\153\1\0\1\151\3\155\2\152"+
    "\1\155\1\152\1\155\1\167\1\152\1\155\4\152\1\155"+
    "\13\152\1\155\1\151\2\155\1\151\1\152\2\155\1\0"+
    "\3\151\2\0\1\153\1\0\1\151\3\155\2\152\1\155"+
    "\1\152\1\155\1\170\1\152\1\155\4\152\1\155\13\152"+
    "\1\155\1\151\2\155\1\151\3\152\1\0\3\151\2\0"+
    "\1\153\1\0\1\151\6\152\1\171\25\152\1\151\2\152"+
    "\1\151\3\152\1\0\3\151\2\0\1\153\1\0\1\151"+
    "\12\152\1\172\21\152\1\151\2\152\1\151\3\152\1\0"+
    "\3\151\2\0\1\153\1\0\1\151\12\152\1\173\1\152"+
    "\1\174\17\152\1\151\2\152\1\151\3\152\1\0\3\151"+
    "\2\0\1\153\1\0\1\151\12\152\1\175\21\152\1\151"+
    "\2\152\1\151\1\152\2\155\1\0\3\151\2\0\1\153"+
    "\1\0\1\151\3\155\2\152\1\155\1\152\1\155\2\152"+
    "\1\155\1\176\3\152\1\155\11\152\1\172\1\152\1\155"+
    "\1\151\2\155\1\151\3\152\1\0\3\151\2\0\1\153"+
    "\1\0\1\151\6\152\1\177\3\152\1\200\2\152\1\176"+
    "\16\152\1\151\2\152\1\151\3\152\1\0\3\151\2\0"+
    "\1\153\1\0\1\151\12\152\1\176\4\152\1\201\14\152"+
    "\1\151\2\152\1\151\3\152\1\0\3\151\2\0\1\153"+
    "\1\0\1\151\12\152\1\174\1\152\1\173\17\152\1\151"+
    "\2\152\1\151\3\152\1\0\3\151\2\0\1\153\1\0"+
    "\1\151\14\152\1\202\17\152\1\151\2\152\1\151\3\152"+
    "\1\0\3\151\2\0\1\153\1\0\1\151\3\152\1\103"+
    "\30\152\1\151\2\152\1\151\3\152\1\0\3\151\2\0"+
    "\1\153\1\0\1\151\4\152\1\103\27\152\1\151\2\152"+
    "\1\151\3\152\1\0\3\151\2\0\1\153\1\0\1\151"+
    "\1\152\1\163\6\152\2\103\22\152\1\151\2\152\1\151"+
    "\3\152\1\0\3\151\2\0\1\153\1\0\1\151\1\203"+
    "\13\152\1\167\1\204\16\152\1\151\2\152\1\151\1\152"+
    "\1\44\1\152\1\0\3\151\2\0\1\153\1\0\1\151"+
    "\2\152\1\44\14\152\1\44\13\152\1\44\1\151\2\44"+
    "\1\151\3\152\1\0\3\151\2\0\1\153\1\0\1\151"+
    "\2\152\1\44\14\152\1\44\14\152\1\151\2\152\1\151"+
    "\3\152\1\0\3\151\2\0\1\153\1\0\1\151\12\152"+
    "\1\205\21\152\1\151\2\152\1\151\3\152\1\0\3\151"+
    "\2\0\1\153\1\0\1\151\1\152\1\44\32\152\1\151"+
    "\2\152\1\151\3\152\1\0\3\151\2\0\1\153\1\0"+
    "\1\151\11\152\1\135\22\152\1\151\2\152\1\151\3\152"+
    "\1\0\3\151\2\0\1\153\1\0\1\151\12\152\1\206"+
    "\21\152\1\151\2\152\1\151\3\152\1\0\3\151\2\0"+
    "\1\153\1\0\1\151\30\152\1\207\3\152\1\151\2\152"+
    "\1\151\3\152\1\0\3\151\2\0\1\153\1\0\1\151"+
    "\14\152\1\210\17\152\1\151\2\152\1\151\3\152\1\0"+
    "\3\151\2\0\1\153\1\0\1\151\31\152\1\206\2\152"+
    "\1\151\2\152\1\151\3\152\1\0\3\151\2\0\1\153"+
    "\1\0\1\151\12\152\1\210\21\152\1\151\2\152\1\151"+
    "\3\152\1\0\3\151\2\0\1\153\1\0\1\151\5\152"+
    "\1\211\16\152\1\212\7\152\1\151\2\152\1\151\3\152"+
    "\1\0\3\151\2\0\1\153\1\0\1\151\7\152\1\105"+
    "\24\152\1\151\2\152\1\151\3\152\1\0\3\151\2\0"+
    "\1\153\1\0\1\151\7\152\1\213\16\152\1\214\5\152"+
    "\1\151\2\152\1\151\3\152\1\0\3\151\2\0\1\153"+
    "\1\0\1\151\10\152\1\215\3\152\1\216\17\152\1\151"+
    "\2\152\1\151\3\152\1\0\3\151\2\0\1\153\1\0"+
    "\1\151\1\215\7\152\1\215\23\152\1\151\2\152\1\151"+
    "\3\152\1\0\3\151\2\0\1\153\1\0\1\151\7\152"+
    "\1\103\15\152\1\103\6\152\1\151\2\152\1\151\3\152"+
    "\1\0\3\151\2\0\1\153\1\0\1\151\1\217\33\152"+
    "\1\151\2\152\1\151\3\152\1\0\3\151\2\0\1\153"+
    "\1\0\1\151\1\152\1\220\2\152\1\221\27\152\1\151"+
    "\2\152\1\151\3\152\1\0\3\151\2\0\1\153\1\0"+
    "\1\151\1\152\1\163\6\152\2\103\6\152\1\156\13\152"+
    "\1\151\2\152\1\151\3\152\1\0\3\151\2\0\1\153"+
    "\1\0\1\151\6\152\1\222\6\152\1\223\16\152\1\151"+
    "\2\152\1\151\3\152\1\0\3\151\2\0\1\153\1\0"+
    "\1\151\1\152\1\224\6\152\1\225\14\152\1\226\6\152"+
    "\1\151\2\152\1\151\3\152\1\0\3\151\2\0\1\153"+
    "\1\0\1\151\5\152\1\227\5\152\1\103\20\152\1\151"+
    "\2\152\1\151\3\152\1\0\3\151\2\0\1\153\1\0"+
    "\1\151\6\152\1\103\25\152\1\151\2\152\1\151\3\152"+
    "\1\0\3\151\2\0\1\153\1\0\1\151\10\152\1\230"+
    "\23\152\1\151\2\152\1\151\3\152\1\0\3\151\2\0"+
    "\1\153\1\0\1\151\4\152\1\231\27\152\1\151\2\152"+
    "\1\151\3\152\1\0\3\151\2\0\1\153\1\0\1\151"+
    "\24\152\1\232\7\152\1\151\2\152\1\151\3\152\1\0"+
    "\3\151\2\0\1\153\1\0\1\151\3\152\1\176\30\152"+
    "\1\151\2\152\1\151\3\152\1\0\3\151\2\0\1\153"+
    "\1\0\1\151\11\152\1\233\22\152\1\151\2\152\1\151"+
    "\3\152\1\0\3\151\2\0\1\153\1\0\1\151\10\152"+
    "\1\234\23\152\1\151\2\152\1\151\3\152\1\0\3\151"+
    "\2\0\1\153\1\0\1\151\1\152\1\167\32\152\1\151"+
    "\2\152\2\0\1\235\14\0\1\235\14\0\1\236\13\0"+
    "\1\235\1\0\1\236\1\237\4\151\1\0\3\151\2\0"+
    "\1\151\1\0\40\151\1\0\1\41\2\240\6\0\1\40"+
    "\2\0\3\240\2\41\1\240\1\41\1\240\2\41\1\240"+
    "\4\41\1\240\13\41\1\240\1\0\2\240\1\151\1\152"+
    "\2\241\1\0\3\151\2\0\1\153\1\0\1\151\3\241"+
    "\2\152\1\241\1\152\1\241\2\152\1\241\4\152\1\241"+
    "\13\152\1\241\1\151\2\241\1\151\1\152\2\241\1\0"+
    "\3\151\2\0\1\153\1\0\1\151\3\241\1\242\1\152"+
    "\1\241\1\152\1\241\2\152\1\241\4\152\1\241\13\152"+
    "\1\241\1\151\2\241\1\151\1\152\2\241\1\0\3\151"+
    "\2\0\1\153\1\0\1\151\3\241\1\105\1\103\1\241"+
    "\1\152\1\241\2\152\1\241\4\152\1\241\13\152\1\241"+
    "\1\151\2\241\1\151\1\152\2\241\1\0\3\151\2\0"+
    "\1\153\1\0\1\151\3\241\2\152\1\241\1\152\1\241"+
    "\2\152\1\241\4\152\1\243\13\152\1\241\1\151\2\241"+
    "\1\151\3\152\1\0\3\151\2\0\1\153\1\0\1\151"+
    "\15\152\1\244\16\152\1\151\2\152\1\151\3\152\1\0"+
    "\3\151\2\0\1\153\1\0\1\151\17\152\1\103\14\152"+
    "\1\151\2\152\1\151\3\152\1\0\3\151\2\0\1\153"+
    "\1\0\1\151\4\152\1\103\5\152\1\105\21\152\1\151"+
    "\2\152\1\151\3\152\1\0\3\151\2\0\1\153\1\0"+
    "\1\151\11\152\1\103\22\152\1\151\2\152\1\151\3\152"+
    "\1\0\3\151\2\0\1\153\1\0\1\151\15\152\1\103"+
    "\16\152\1\151\2\152\1\151\3\152\1\0\3\151\2\0"+
    "\1\153\1\0\1\151\10\152\1\167\10\152\1\245\12\152"+
    "\1\151\2\152\1\151\3\152\1\0\3\151\2\0\1\153"+
    "\1\0\1\151\21\152\1\245\12\152\1\151\2\152\1\151"+
    "\3\152\1\0\3\151\2\0\1\153\1\0\1\151\21\152"+
    "\1\246\12\152\1\151\2\152\1\151\3\152\1\0\3\151"+
    "\2\0\1\153\1\0\1\151\1\247\33\152\1\151\2\152"+
    "\1\151\3\152\1\0\3\151\2\0\1\153\1\0\1\151"+
    "\14\152\1\103\17\152\1\151\2\152\1\151\3\152\1\0"+
    "\3\151\2\0\1\153\1\0\1\151\12\152\1\250\21\152"+
    "\1\151\2\152\1\151\3\152\1\0\3\151\2\0\1\153"+
    "\1\0\1\151\31\152\1\250\2\152\1\151\2\152\1\151"+
    "\2\152\1\103\1\0\3\151\2\0\1\153\1\0\1\151"+
    "\34\152\1\151\2\152\1\151\3\152\1\0\3\151\2\0"+
    "\1\153\1\0\1\151\12\152\1\251\21\152\1\151\2\152"+
    "\1\151\3\152\1\0\3\151\2\0\1\153\1\0\1\151"+
    "\10\152\1\252\23\152\1\151\2\152\1\151\3\152\1\0"+
    "\3\151\2\0\1\153\1\0\1\151\14\152\1\253\17\152"+
    "\1\151\2\152\1\151\3\152\1\0\3\151\2\0\1\153"+
    "\1\0\1\151\14\152\1\167\17\152\1\151\2\152\1\151"+
    "\3\152\1\0\3\151\2\0\1\153\1\0\1\151\3\152"+
    "\1\167\30\152\1\151\2\152\1\151\3\152\1\0\3\151"+
    "\2\0\1\153\1\0\1\151\3\152\1\254\1\167\27\152"+
    "\1\151\2\152\1\151\3\152\1\0\3\151\2\0\1\153"+
    "\1\0\1\151\5\152\1\103\26\152\1\151\2\152\1\151"+
    "\3\152\1\0\3\151\2\0\1\153\1\0\1\151\12\152"+
    "\1\103\21\152\1\151\2\152\1\151\3\152\1\0\3\151"+
    "\2\0\1\153\1\0\1\151\7\152\1\255\24\152\1\151"+
    "\2\152\1\151\3\152\1\0\3\151\2\0\1\153\1\0"+
    "\1\151\24\152\1\103\7\152\1\151\2\152\1\151\3\152"+
    "\1\0\3\151\2\0\1\153\1\0\1\151\3\152\1\105"+
    "\1\103\27\152\1\151\2\152\1\151\3\152\1\0\3\151"+
    "\2\0\1\153\1\0\1\151\14\152\1\256\17\152\1\151"+
    "\2\152\1\151\3\152\1\0\3\151\2\0\1\153\1\0"+
    "\1\151\11\152\1\44\22\152\1\151\2\152\1\151\3\152"+
    "\1\0\3\151\2\0\1\153\1\0\1\151\7\152\1\103"+
    "\24\152\1\151\2\152\1\151\3\152\1\0\3\151\2\0"+
    "\1\153\1\0\1\151\1\152\1\103\32\152\1\151\2\152"+
    "\1\151\3\152\1\0\3\151\2\0\1\153\1\0\1\151"+
    "\1\152\1\257\32\152\1\151\2\152\1\151\3\152\1\0"+
    "\3\151\2\0\1\153\1\0\1\151\2\152\1\103\31\152"+
    "\1\151\2\152\1\151\3\152\1\0\3\151\2\0\1\153"+
    "\1\0\1\151\20\152\1\103\13\152\1\151\2\152\1\151"+
    "\3\152\1\0\3\151\2\0\1\153\1\0\1\151\5\152"+
    "\1\105\26\152\1\151\2\152\1\151\3\152\1\0\3\151"+
    "\2\0\1\153\1\0\1\151\14\152\1\105\17\152\1\151"+
    "\2\152\1\151\3\152\1\0\3\151\2\0\1\153\1\0"+
    "\1\151\6\152\1\103\3\152\1\103\6\152\1\103\12\152"+
    "\1\151\2\152\1\151\3\152\1\0\3\151\2\0\1\153"+
    "\1\0\1\151\5\152\1\251\26\152\1\151\2\152\1\151"+
    "\3\152\1\0\3\151\2\0\1\153\1\0\1\151\11\152"+
    "\1\147\1\152\1\167\20\152\1\151\2\152\2\0\1\235"+
    "\14\0\1\235\14\0\1\235\13\0\1\235\1\0\2\235"+
    "\17\0\1\235\14\0\1\235\20\0\1\41\2\260\6\0"+
    "\1\40\2\0\3\260\2\41\1\260\1\41\1\260\2\41"+
    "\1\260\4\41\1\260\13\41\1\260\1\0\2\260\1\151"+
    "\1\152\2\261\1\0\3\151\2\0\1\153\1\0\1\151"+
    "\3\261\2\152\1\261\1\152\1\261\2\152\1\261\4\152"+
    "\1\261\13\152\1\261\1\151\2\261\1\151\3\152\1\0"+
    "\3\151\2\0\1\153\1\0\1\151\12\152\1\44\21\152"+
    "\1\151\2\152\1\151\3\152\1\0\3\151\2\0\1\153"+
    "\1\0\1\151\10\152\1\167\23\152\1\151\2\152\1\151"+
    "\3\152\1\0\3\151\2\0\1\153\1\0\1\151\1\262"+
    "\7\152\1\167\23\152\1\151\2\152\1\151\3\152\1\0"+
    "\3\151\2\0\1\153\1\0\1\151\16\152\1\103\15\152"+
    "\1\151\2\152\1\151\3\152\1\0\3\151\2\0\1\153"+
    "\1\0\1\151\21\152\1\167\12\152\1\151\2\152\1\151"+
    "\3\152\1\0\3\151\2\0\1\153\1\0\1\151\17\152"+
    "\1\263\13\152\1\251\1\151\2\152\1\151\3\152\1\0"+
    "\3\151\2\0\1\153\1\0\1\151\20\152\1\264\13\152"+
    "\1\151\2\152\1\151\3\152\1\0\3\151\2\0\1\153"+
    "\1\0\1\151\4\152\1\167\27\152\1\151\2\152\1\151"+
    "\3\152\1\0\3\151\2\0\1\153\1\0\1\151\23\152"+
    "\1\103\10\152\1\151\2\152\1\151\3\152\1\0\3\151"+
    "\2\0\1\153\1\0\1\151\4\152\1\265\27\152\1\151"+
    "\2\152\1\151\3\152\1\0\3\151\2\0\1\153\1\0"+
    "\1\151\1\266\33\152\1\151\2\152\1\0\1\41\2\267"+
    "\6\0\1\40\2\0\3\267\2\41\1\267\1\41\1\267"+
    "\2\41\1\267\4\41\1\267\13\41\1\267\1\0\2\267"+
    "\1\151\1\152\2\270\1\0\3\151\2\0\1\153\1\0"+
    "\1\151\3\270\2\152\1\270\1\152\1\270\2\152\1\270"+
    "\4\152\1\270\13\152\1\270\1\151\2\270\1\151\3\152"+
    "\1\0\3\151\2\0\1\153\1\0\1\151\10\152\1\245"+
    "\23\152\1\151\2\152\1\151\3\152\1\0\3\151\2\0"+
    "\1\153\1\0\1\151\2\152\1\251\31\152\1\151\2\152"+
    "\1\151\3\152\1\0\3\151\2\0\1\153\1\0\1\151"+
    "\11\152\1\212\22\152\1\151\2\152\1\151\3\152\1\0"+
    "\3\151\2\0\1\153\1\0\1\151\15\152\1\44\16\152"+
    "\1\151\2\152\1\151\3\152\1\0\3\151\2\0\1\153"+
    "\1\0\1\151\10\152\1\271\23\152\1\151\2\152\1\0"+
    "\1\41\2\272\6\0\1\40\2\0\3\272\2\41\1\272"+
    "\1\41\1\272\2\41\1\272\4\41\1\272\13\41\1\272"+
    "\1\0\2\272\1\151\1\152\2\273\1\0\3\151\2\0"+
    "\1\153\1\0\1\151\3\273\2\152\1\273\1\152\1\273"+
    "\2\152\1\273\4\152\1\273\13\152\1\273\1\151\2\273"+
    "\1\151\3\152\1\0\3\151\2\0\1\153\1\0\1\151"+
    "\10\152\1\103\23\152\1\151\2\152\1\0\1\41\2\274"+
    "\6\0\1\40\2\0\3\274\2\41\1\274\1\41\1\274"+
    "\2\41\1\274\4\41\1\274\13\41\1\274\1\0\2\274"+
    "\1\151\1\152\2\275\1\0\3\151\2\0\1\153\1\0"+
    "\1\151\3\275\2\152\1\275\1\152\1\275\2\152\1\275"+
    "\4\152\1\275\13\152\1\275\1\151\2\275";

  private static int [] zzUnpackTrans() {
    int [] result = new int[7084];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\6\1\1\11\1\1\1\11\23\1\1\0"+
    "\1\11\3\0\1\1\1\0\2\11\10\0\2\1\1\0"+
    "\2\1\16\0\1\1\1\0\2\1\1\0\2\1\13\0"+
    "\1\1\5\0\1\1\1\0\1\1\11\0\1\1\1\0"+
    "\3\1\1\0\60\1\1\11\22\1\1\0\6\1\1\0"+
    "\2\1\1\0\3\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[189];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */


	/**
	 * Constructor.  We must have this here as JFLex does not generate a
	 * no parameter constructor.
	 */
	public AssemblerTxTokenMaker() {
		super();
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 */
	private void addToken(int tokenType) {
		addToken(zzStartRead, zzMarkedPos-1, tokenType);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 */
	private void addToken(int start, int end, int tokenType) {
		int so = start + offsetShift;
		addToken(zzBuffer, start,end, tokenType, so);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param array The character array.
	 * @param start The starting offset in the array.
	 * @param end The ending offset in the array.
	 * @param tokenType The token's type.
	 * @param startOffset The offset in the document at which this token
	 *                    occurs.
	 */
	public void addToken(char[] array, int start, int end, int tokenType, int startOffset) {
		super.addToken(array, start,end, tokenType, startOffset);
		zzStartRead = zzMarkedPos;
	}


	/**
	 * Returns the text to place at the beginning and end of a
	 * line to "comment" it in a this programming language.
	 *
	 * @return The start and end strings to add to a line to "comment"
	 *         it out.
	 */
	public String[] getLineCommentStartAndEnd() {
		return new String[] { ";", null };
	}


	/**
	 * Returns the first token in the linked list of tokens generated
	 * from <code>text</code>.  This method must be implemented by
	 * subclasses so they can correctly implement syntax highlighting.
	 *
	 * @param text The text from which to get tokens.
	 * @param initialTokenType The token type we should start with.
	 * @param startOffset The offset into the document at which
	 *                    <code>text</code> starts.
	 * @return The first <code>Token</code> in a linked list representing
	 *         the syntax highlighted text.
	 */
	public Token getTokenList(Segment text, int initialTokenType, int startOffset) {

		resetTokenList();
		this.offsetShift = -text.offset + startOffset;

		// Start off in the proper state.
		int state = Token.NULL;
		switch (initialTokenType) {
			default:
				state = Token.NULL;
		}

		s = text;
		try {
			yyreset(zzReader);
			yybegin(state);
			return yylex();
		} catch (IOException ioe) {
			ioe.printStackTrace();
			return new DefaultToken();
		}

	}

	/**
	 * Returns whether tokens of the specified type should have "mark
	 * occurrences" enabled for the current programming language.
	 * Basically, we return true for everything except blanks
	 *
	 * @param type The token type.
	 * @return Whether tokens of this type should have "mark occurrences"
	 *         enabled.
	 */
	public boolean getMarkOccurrencesOfTokenType(int type) {
        return     type == Token.IDENTIFIER
                || type == Token.FUNCTION
                || type == Token.RESERVED_WORD
                || type == Token.RESERVED_WORD_2
                || type == Token.DATA_TYPE
                || type == Token.LITERAL_CHAR
                || type == Token.LITERAL_NUMBER_HEXADECIMAL
                || type == Token.ANNOTATION
                || type == Token.OPERATOR
                || type == Token.VARIABLE;
	}


	/**
	 * Refills the input buffer.
	 *
	 * @return      <code>true</code> if EOF was reached, otherwise
	 *              <code>false</code>.
	 * @exception   IOException  if any I/O-Error occurs.
	 */
	private boolean zzRefill() throws java.io.IOException {
		return zzCurrentPos>=s.offset+s.count;
	}


	/**
	 * Resets the scanner to read from a new input stream.
	 * Does not close the old reader.
	 *
	 * All internal variables are reset, the old input stream 
	 * <b>cannot</b> be reused (internal buffer is discarded and lost).
	 * Lexical state is set to <tt>YY_INITIAL</tt>.
	 *
	 * @param reader   the new input stream 
	 */
	public final void yyreset(java.io.Reader reader) throws java.io.IOException {
		// 's' has been updated.
		zzBuffer = s.array;
		/*
		 * We replaced the line below with the two below it because zzRefill
		 * no longer "refills" the buffer (since the way we do it, it's always
		 * "full" the first time through, since it points to the segment's
		 * array).  So, we assign zzEndRead here.
		 */
		//zzStartRead = zzEndRead = s.offset;
		zzStartRead = s.offset;
		zzEndRead = zzStartRead + s.count - 1;
		zzCurrentPos = zzMarkedPos = s.offset;
		zzLexicalState = YYINITIAL;
		zzReader = reader;
		zzAtBOL  = true;
		zzAtEOF  = false;
	}




  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public AssemblerTxTokenMaker(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public AssemblerTxTokenMaker(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 200) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public org.fife.ui.rsyntaxtextarea.Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 14: 
          { addToken(Token.RESERVED_WORD);
          }
        case 18: break;
        case 1: 
          { addToken(Token.IDENTIFIER);
          }
        case 19: break;
        case 13: 
          { addToken(Token.FUNCTION);
          }
        case 20: break;
        case 11: 
          { addToken(Token.LITERAL_STRING_DOUBLE_QUOTE);
          }
        case 21: break;
        case 4: 
          { addToken(Token.COMMENT_EOL); addNullToken(); return firstToken;
          }
        case 22: break;
        case 15: 
          { addToken(Token.ANNOTATION);
          }
        case 23: break;
        case 10: 
          { addToken(Token.VARIABLE);
          }
        case 24: break;
        case 8: 
          { addToken(Token.RESERVED_WORD_2);
          }
        case 25: break;
        case 6: 
          { addToken(Token.WHITESPACE);
          }
        case 26: break;
        case 9: 
          { addToken(Token.PREPROCESSOR);
          }
        case 27: break;
        case 16: 
          { addToken(Token.DATA_TYPE);
          }
        case 28: break;
        case 3: 
          { addToken(Token.ERROR_CHAR); /*addNullToken(); return firstToken;*/
          }
        case 29: break;
        case 17: 
          { addToken(Token.LITERAL_NUMBER_HEXADECIMAL);
          }
        case 30: break;
        case 7: 
          { addToken(Token.OPERATOR);
          }
        case 31: break;
        case 12: 
          { addToken(Token.LITERAL_CHAR);
          }
        case 32: break;
        case 2: 
          { addToken(Token.ERROR_STRING_DOUBLE); addNullToken(); return firstToken;
          }
        case 33: break;
        case 5: 
          { addNullToken(); return firstToken;
          }
        case 34: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            switch (zzLexicalState) {
            case YYINITIAL: {
              addNullToken(); return firstToken;
            }
            case 190: break;
            default:
            return null;
            }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
