# The main part of this file describes the D800 "B" firmware, ver 1.02a
#
# Use in Emulator or
# startDfr.bat -wstructure -wparameters -wint40 -wmemory -waddress -whexcode -x b630102a.dfr.txt -o b630102a.asm b630102a.bin

############################### File map: D800
-i 0x00040000-0x000DFFFF=0x00000000
-i 0x00100000-0x0087FFFF=0x000C0000
-i 0x00C00000-0x0103FFFF=0x009E0000

# copied data
# at 0x000408B8 copied size 0x0001FCA0
#-i 0x84F23B20-0x84F437BF=0x0048FDE8
# at 0x000408DC copied size 0x00000020
#-i 0x68003808-0x68003827=0x004C176C
# at 0x0011214E copied size 0x00011020
#-i 0x84F437BC-0x84F547DB=0x004AFA84
# at 0x00040924 copied size 0x00000CCA
#-i 0x85B4A154-0x85B4AE1D=0x004C0AA0

############################### Memory map:

-m 0x00040000-0x00040A77=CODE


# Table of offsets used by INT 0x40 :
-m 0x00040A78-0x00040BD7=DATA:W

-m 0x00040BD8-0x00040CB5=CODE

# Softune RTOS Copyright :
-m 0x00040CB6-0x00040D21=DATA:L

# ITRON kernel code
-m 0x00040D21-0x0008A3E9=CODE

# tblTaskData
-m 0x000D1244-0x000D1A5F=DATA:L



# Interrupt vector table.
-t 0x000DFC00

-m 0x00100000-0x0029387D=CODE

-m 0x003FA48E-0x004CFDE7=CODE

-m 0x005A9678-0x005B68A5=CODE

############################### Symbols

# syscalls
-s 0x00040BD8=sys_unsupported_function (R12 [OUT err_code])
-s 0x00040BDC=sys_reserved_function (R12 [OUT err_code])
-s 0x00041456=sys_set_tim(R4 [IN ptr_to_pk_tim], R12 [OUT err_code] /* Set System Clock */)
-s 0x00041474=sys_get_tim(R4 [IN ptr_to_pk_tim], R12 [OUT err_code] /* Get System Clock */)
-s 0x00041492=sys_dly_tsk(R4 [IN dly_tim], R12 [OUT err_code] /* Delay Task */)
-s 0x000414EE=sys_def_cyc(R4 [IN cycno], R5 [IN ptr_to_pk_dcyc], R12 [OUT err_code] /* Define Cyclic Handler */)
-s 0x0004156C=sys_act_cyc(R4 [IN cycno], R5 [IN cycact], R12 [OUT err_code] /* Activate Cyclic Handler */)
-s 0x000415D2=sys_ref_cyc(R4 [IN ptr_to_pk_rcyc], R5 [IN cycno], R12 [OUT err_code] /* Get Cyclic Handler Status */)
-s 0x00041654=sys_def_alm(R4 [IN almno], R5 [IN ptr_to_pk_dalm], R12 [OUT err_code] /* Define Alarm Handler */)
-s 0x000416E2=sys_ref_alm(R4 [IN ptr_to_pk_ralm], R5 [IN almno], R12 [OUT err_code] /* Get Alarm Handler Status */)
-s 0x00041754=sys_sus_tsk(R4 [IN tsk_id], R12 [OUT err_code] /* Suspend Other Task */)
-s 0x000417D8=sys_rsm_tsk(R4 [IN tsk_id], R12 [OUT err_code] /* Resume Suspended Task */)
-s 0x00041860=sys_frsm_tsk(R4 [IN tsk_id], R12 [OUT err_code] /* Forcibly Resume suspended Task */)
-s 0x000418C0=sys_slp_tsk(R12 [OUT err_code] /* Sleep Task */)
-s 0x000418F6=sys_tslp_tsk(R4 [IN timeout], R12 [OUT err_code] /* Sleep Task with Timeout */)
-s 0x0004197A=sys_wup_tsk(R4 [IN tsk_id], R12 [OUT err_code] /* Wakeup Other Task */)
-s 0x000419DC=sys_can_wup(R4 [IN tsk_id], R12 [OUT err_code], R13 [OUT wakeup_count] /* Cancel Wakeup Request */)
-s 0x00041A40=sys_sta_tsk(R4 [IN tsk_id], R5 [IN tsk_param], R12 [OUT err_code] /* Start Task */)
-s 0x00041ABE=sys_ext_tsk(R12 [OUT err_code] /* Exit Issuing Task */)
-s 0x00041B18=sys_ter_tsk(R4 [IN tsk_id], R12 [OUT err_code] /* Terminate Other Task */)
-s 0x00041BB6=sys_dis_dsp(R12 [OUT err_code] /* Disable Dispatch */)
-s 0x00041BD8=sys_ena_dsp(R12 [OUT err_code] /* Enable Dispatch */)
-s 0x00041BF4=sys_chg_pri(R4 [IN tsk_id], R5 [IN tsk_prio], R12 [OUT err_code] /* Change Task Priority */)
-s 0x00041C5C=sys_rot_rdq(R4 [IN tsk_prio], R12 [OUT err_code] /* Rotate Tasks on the Ready Queue */)
-s 0x00041CC2=sys_rel_wai(R4 [IN tsk_id], R12 [OUT err_code] /* Release Wait of Other Task */)
-s 0x00041D44=sys_get_tid(R12 [OUT err_code], R13 [OUT tsk_id] /* Get Task Identifier */)
-s 0x00041D64=sys_ref_tsk(R4 [IN ptr_to_pk_rtsk], R5 [IN tsk_id], R12 [OUT err_code] /* Get Task Status */)
-s 0x00041E38=sys_sig_sem(R4 [IN sem_id], R12 [OUT err_code] /* Signal Semaphore */)
-s 0x00041E7A=sys_wai_sem(R4 [IN sem_id], R12 [OUT err_code] /* Wait on Semaphore */)
-s 0x00041EBC=sys_preq_sem(R4 [IN sem_id], R12 [OUT err_code] /* Poll and request Semaphore */)
-s 0x00041EF0=sys_twai_sem(R4 [IN sem_id], R5 [IN timeout], R12 [OUT err_code] /* Wait on Semaphore with Timeout */)
-s 0x00041F76=sys_ref_sem(R4 [IN ptr_to_pk_rsem], R5 [IN sem_id], R12 [OUT err_code] /* Get Semaphore Status */)
-s 0x00041FC0=sys_set_flg(R4 [IN flag_id], R5 [IN set_pattern], R12 [OUT err_code] /* Set Eventflag */)
-s 0x0004205A=sys_clr_flg(R4 [IN flag_id], R5 [IN clr_pattern], R12 [OUT err_code] /* Clear Eventflag */)
-s 0x00042082=sys_wai_flg(R5 [IN flag_id], R6 [IN wai_pattern], R7 [IN wait_flag_mode], R12 [OUT err_code], R13 [OUT flag_pattern] /* Wait for Eventflag */)
-s 0x0004210A=sys_pol_flg(R5 [IN flag_id], R6 [IN wai_pattern], R7 [IN wait_flag_mode], R12 [OUT err_code], R13 [OUT flag_pattern] /* Wait for Eventflag, polling */)
-s 0x00042162=sys_twai_flg(R5 [IN flag_id], R6 [IN wai_pattern], R7 [IN wait_flag_mode], R12 [OUT err_code], R13 [IN timeout; OUT flag_pattern] /* Wait for Eventflag, with Timeout */)
-s 0x00042220=sys_ref_flg(R4 [IN ptr_to_pk_rflg], R5 [IN flag_id], R12 [OUT err_code] /* Get Eventflag Status */)
-s 0x00042256=sys_snd_msg(R4 [IN mailbox_id], R5 [IN ptr_to_pk_msg], R12 [OUT err_code] /* Send Message to Mailbox */)
-s 0x000422B0=sys_rcv_msg(R5 [IN mailbox_id], R12 [OUT err_code], R13 [OUT ptr_to_pk_msg] /* Receive Message from Mailbox */)
-s 0x00042300=sys_prcv_msg(R5 [IN mailbox_id], R12 [OUT err_code], R13 [OUT ptr_to_pk_msg] /* Receive Message from Mailbox, polling */)
-s 0x0004234E=sys_trcv_msg(R5 [IN mailbox_id], R6 [IN timeout], R12 [OUT err_code], R13 [OUT ptr_to_pk_msg] /* Receive Message from Mailbox, with Timeout */)
-s 0x000423D0=sys_ref_mbx(R4 [IN ptr_to_pk_rmbx], R5 [IN mailbox_id], R12 [OUT err_code] /* Get Mailbox Status */)
-s 0x00042454=sys_get_blk(R5 [IN mempool_id], R6 [IN blk_size], R12 [OUT err_code], R13 [OUT blk_start] /* Get Variable-Sized Memory Block */)
-s 0x00042548=sys_pget_blk(R5 [IN mempool_id], R6 [IN blk_size], R12 [OUT err_code], R13 [OUT blk_start] /* Get Variable-Sized Memory Block, polling */)
-s 0x00042648=sys_rel_blk(R4 [IN mempool_id], R5 [OUT blk_start], R12 [OUT err_code] /* Release Variable-Sized Memory Block */)
-s 0x00042806=sys_ref_mpl(R4 [IN ptr_to_pk_rmempool], R5 [IN mempool_id], R12 [OUT err_code] /* Get Variable-Sized Memorypool Status */)
-s 0x00042880=sys_get_blf(R5 [IN mempool_f_id], R12 [OUT err_code], R13 [OUT blk_f_start] /* Get Fixed-Sized Memory Block */)
-s 0x000428DC=sys_pget_blf(R5 [IN mempool_f_id], R12 [OUT err_code], R13 [OUT blk_f_start] /* Poll and Get Fixed-Sized Memory Block */)
-s 0x00042920=sys_tget_blf(R5 [IN mempool_f_id], R6 [IN timeout], R12 [OUT err_code], R13 [OUT blk_f_start] /* Get Fixed-Sized Memory Block with Timeout */)
-s 0x000429C2=sys_rel_blf(R4 [IN mempool_f_id], R5 [IN ptr; OUT blk_f_start], R12 [OUT err_code] /* Release Fixed-Sized Memory Block */)
-s 0x00042A90=sys_ref_mpf(R4 [IN ptr_to_pk_rmempool_f], R5 [IN mempool_f_id], R12 [OUT err_code] /* Get Fixed-Sized Memorypool Status */)
-s 0x00042ACC=sys_loc_cpu(R12 [OUT err_code] /* Lock CPU */)
-s 0x00042AE0=sys_unl_cpu(R12 [OUT err_code] /* Unlock CPU */)
-s 0x00042AF4=sys_chg_ilm(R4 [IN ilmask], R12 [OUT err_code] /* Change Interrupt Level Mask */)
-s 0x00042B1C=sys_ref_ilm(R12 [OUT err_code], R13 [OUT ilmask] /* Get Interrupt Level Mask */)
-s 0x00042B40=sys_get_ver(R4 [IN ptr_to_pk_ver], R12 [OUT err_code] /* Get Version Information */)
-s 0x00042B7C=sys_ref_sys(R4 [IN ptr_to_pk_rsys], R12 [OUT err_code] /* Get System Status */)

# tasks
-s 0x159A14=task_0x01
-s 0x1AE258=task_0x02
-s 0x1A8284=task_0x03
-s 0x1AA024=task_0x04
-s 0x1C3B3E=task_0x05
-s 0x1C4D1E=task_0x06
-s 0x27849A=task_0x07
-s 0x1B339A=task_0x08
-s 0x1B53D6=task_0x09
-s 0x1B0D88=task_0x0A
-s 0x1B0732=task_0x0B
-s 0x1AE798=task_0x0C
-s 0x1B5AF4=task_0x0D
-s 0x1B607C=task_0x0E
-s 0x1B6604=task_0x0F
-s 0x26B1E4=task_0x10
-s 0x26B49A=task_0x11
-s 0x1ACDE4=task_0x12
-s 0x1AD6BC=task_0x13
-s 0x177268=task_0x14
-s 0x1972FC=task_0x15
-s 0x13B104=task_0x16
-s 0x1E7E8A=task_0x17
-s 0x138E02=task_0x18
-s 0x13B3A4=task_0x19
-s 0x1000E2=task_0x1A( /* Autorun */)
-s 0x12B1D8=task_0x1B
-s 0x12E7BA=task_0x1C
-s 0x266EE4=task_0x1D
-s 0x2668E0=task_0x1E
-s 0x2299C8=task_0x1F
-s 0x19D66E=task_0x20
-s 0x12F636=task_0x21
-s 0x2791B8=task_0x22
-s 0x1F3AEC=task_0x23
-s 0x260EC6=task_0x24
-s 0x25FD0C=task_0x25
-s 0x4385C=task_0x26
-s 0x18DC94=task_0x27
-s 0x27662C=task_0x28
-s 0x27666C=task_0x29
-s 0x274984=task_0x2A
-s 0x18EA2C=task_0x2B
-s 0x18F3E0=task_0x2C
-s 0x1C17EC=task_0x2D
-s 0x1C9504=task_0x2E
-s 0x27767A=task_0x2F
-s 0x1C53EC=task_0x30
-s 0x277A0A=task_0x31
-s 0x111FC6=task_0x32
-s 0x116654=task_0x33
-s 0x10D228=task_0x34
-s 0x197F46=task_0x35
-s 0x155E4A=task_0x36
-s 0x46A56E=task_0x37
-s 0x49B9E8=task_0x38
-s 0x1985E2=task_0x39
-s 0x147C8C=task_0x3A
-s 0x1BB1DA=task_0x3B
-s 0x1540D0=task_0x3C
-s 0x154130=task_0x3D
-s 0x263F3A=task_0x3E
-s 0x6176A=task_0x3F
-s 0x609C8=task_0x40
-s 0x677D6=task_0x41
-s 0x6781E=task_0x42
-s 0x6778E=task_0x43
-s 0x6BD04=task_0x44
-s 0x5E936=task_0x45
-s 0x5D43A=task_0x46
-s 0x5AA4A=task_0x47
-s 0x1D40FC=task_0x48
-s 0x1D0BA8=task_0x49
-s 0x25DE12=task_0x4A

# other
-s 0x00040FBC=UpdateClock_ms()
-s 0x00041DB8=krnl_TableGetRecord(R14 [IN ptr_table; OUT ptr_record], R4 [IN index_1_based])
-s 0x00101E46=LoadLanguage(R4 [IN index])
-s 0x0016A9F6=dlist_init(R4 [IN ptr_to_list] /*creates sentinel node at the beginning*/)
-s 0x0016A9FE=dlist_is_empty(R4 [IN ptr_to_element; OUT is_empty] )
-s 0x0016AA0A=dlist_insert_before(R4 [IN ptr_to_element], R5 [IN ptr_to_new_element] /*insert R5 before R4*/)
-s 0x0016AA1A=dlist_insert_after(R4 [IN ptr_to_element], R5 [IN ptr_to_new_element] /*insert R5 after R4*/)
-s 0x0016AA2A=dlist_remove(R4 [IN ptr_to_element] /*remove R4 element*/)
-s 0x0016AA3A=dlist_remove_previous(R4 [IN ptr_to_element] /*remove item before R4*/)
-s 0x0016AA50=dlist_remove_next(R4 [IN ptr_to_element] /*remove item after R4*/)
-s 0x001A259A=call_FlashWriteNKLD()
-s 0x001A29B8=call_FlashClear(R4 [IN addr; OUT bool_ok],R5 [IN size])
-s 0x001A29CA=call_FlashWrite(R4 [IN dstAddr], R5 [IN srcAddr], R6 [IN size])
-s 0x001A29DC=call_FlashWriteFirmwareOrSettings()
-s 0x001AA1E4=LowPriority_WaitSem(R4 [IN sem_id])
-s 0x001AA222=LowPriority_PollSem(R4 [IN sem_id; OUT error_code])
-s 0x001AA26A=LowPriority_SigSem(R4 [IN sem_id])
-s 0x001AA324=crc16(R4 [IN size; OUT crc16], R5 [IN ptr_buf])
-s 0x001AA85A=EncryptData(R4 [IN ptr_data], R5 [IN size], R6 [IN IV], R7 [IN ptr_key])
-s 0x001AB83A=callInttableFunction(R4 [IN fn_idx])
-s 0x001B6BCA=MailboxPtr_SendMessage(R4 [IN ptr_to_mbx_id; OUT bool_OK], R5 [IN ptr_msg])
-s 0x001B6BEE=MailboxPtr_RecieveMessage(R4 [IN ptr_to_mbx_id; OUT bool_OK], R5 [IN ptr_to_msgptr])
-s 0x001B6CD8=EventPtr_SetPtr(R4 [IN ptr_to_flag_id; OUT bool_OK], R5 [IN flag_id])
-s 0x001B6CE2=EventPtr_SetFlag(R4 [IN ptr_to_flag_id; OUT bool_OK], R5 [IN set_pattern])
-s 0x001B6D02=EventPtr_ClearFlag(R4 [IN ptr_to_flag_id; OUT bool_OK], R5 [IN clr_pattern])
-s 0x001B6D28=EventPtr_WaitFlag_OR(R4 [IN ptr_to_flag_id; OUT bool_OK], R5 [IN wai_pattern], R6 [IN ptr_out_pattern])
-s 0x001B6D54=EventPtr_WaitFlag_AND(R4 [IN ptr_to_flag_id; OUT bool_OK], R5 [IN wai_pattern], R6 [IN ptr_out_pattern])
-s 0x001B6D80=EventPtr_WaitFlag_OR_Timeout(R4 [IN ptr_to_flag_id; OUT bool_OK], R5 [IN wait_pattern], R6 [IN ptr_out_pattern], R7 [IN timeout])
-s 0x001B6DB2=EventPtr_WaitFlag_AND_Timeout(R4 [IN ptr_to_flag_id; OUT bool_OK], R5 [IN wait_pattern], R6 [IN ptr_out_pattern], R7 [IN timeout])
-s 0x001B6DE4=EventPtr_PollFlag(R4 [IN ptr_to_flag_id; OUT bool_OK], R5 [IN wait_pattern], R6 [IN ptr_out_pattern])
-s 0x001B705E=SemaphorePtr_SetID(R4 [IN ptr_to_id; OUT bool_OK], R5 [IN id])
-s 0x001B7068=SignalSemaphorePtr(R4 [IN ptr_to_id; OUT bool_OK])
-s 0x001B7088=WaitOnSemaphorePtr(R4 [IN ptr_to_id; OUT bool_OK])
-s 0x001B70A8=WaitOnSemaphoreTimeout(R4 [IN ptr_to_id; OUT bool_OK], R5 [IN timeout])
-s 0x001B70CA=PollAndRequestSemaphore(R4 [IN ptr_to_id; OUT bool_OK])
-s 0x001B7118=QueueInit(R4 [IN ptr_queue], R5 [IN param], R6 [IN param], R7 [IN param])
-s 0x001B71A8=QueueIsEmpty(R4 [IN ptr_queue; OUT is_empty])
-s 0x001B71D4=QueueAdd(R4 [IN ptr_queue; OUT err], R5 [IN ptr_data])
-s 0x001B7244=QueueTake(R4 [IN ptr_queue], R5 [IN ptr_data])
-s 0x001BD6F4=OnReceive_TxSet00
-s 0x001BD6F6=OnReceive_TxSet02
-s 0x001BD704=OnReceive_TxSet03
-s 0x001BD712=OnReceive_TxSet18
-s 0x001BD720=OnReceive_TxSet32
-s 0x001BD72E=OnReceive_TxSet11
-s 0x001BD73C=OnReceive_TxSet13
-s 0x001BD74A=OnReceive_TxSet14
-s 0x001BD758=OnReceive_TxSet0C
-s 0x001BD766=OnReceive_TxSet15
-s 0x001BD774=OnReceive_TxSet16
-s 0x001BD782=OnReceive_TxSet06
-s 0x001BD790=OnReceive_TxSet04
-s 0x001BD79E=OnReceive_TxSet17
-s 0x001BD7AC=OnReceive_TxSet0B
-s 0x001BD7BA=OnReceive_TxSet31
-s 0x001BD7C8=OnReceive_TxSet12
-s 0x001BD7D6=OnReceive_TxSet23
-s 0x001BD7D8=OnReceive_TxSet05
-s 0x001BD7E6=OnReceive_TxSet1E
-s 0x001BD7F4=OnReceive_TxSet1D
-s 0x001BD802=OnReceive_TxSet07
-s 0x001BD810=OnReceive_TxSet08
-s 0x001BD81E=OnReceive_TxSet09
-s 0x001BD82C=OnReceive_TxSet0A
-s 0x001BD85A=OnReceive_TxSet24
-s 0x001BD868=OnReceive_TxSet25
-s 0x001BD876=OnReceive_TxSet26
-s 0x001BD884=OnReceive_TxSet27
-s 0x001BD892=OnReceive_TxSet2C
-s 0x001BD8A0=OnReceive_TxSet2B
-s 0x001BD8AE=OnReceive_TxSet0E
-s 0x001BD95C=OnReceive_TxSet1F
-s 0x001BD96A=OnReceive_TxSet20
-s 0x001BD978=OnReceive_TxSet22
-s 0x001BD986=OnReceive_TxSet21
-s 0x001BD994=OnReceive_TxSet19
-s 0x001BD9A2=OnReceive_TxSet1A
-s 0x001BD9B0=OnReceive_TxSet1B
-s 0x001BD9BE=OnReceive_TxSet1C
-s 0x001BD9CC=OnReceive_TxSet2D
-s 0x001BD9DA=OnReceive_TxSet30
-s 0x001BD9DC=OnReceive_TxSet0F
-s 0x001BD9EA=OnReceive_TxSet49
-s 0x001BD9F8=OnReceive_TxSet33
-s 0x001BDA06=OnReceive_TxSet34
-s 0x001BDA14=OnReceive_TxSet36
-s 0x001BDA22=OnReceive_TxSet38
-s 0x001BDA30=OnReceive_TxSet39
-s 0x001BDA3E=OnReceive_TxSet3B
-s 0x001BDA4C=OnReceive_TxSet3E
-s 0x001BDA5A=OnReceive_TxSet3C
-s 0x001BDA68=OnReceive_TxSet41
-s 0x001BDA76=OnReceive_TxSet42
-s 0x001BDA84=OnReceive_TxSet3F
-s 0x001BDA92=OnReceive_TxSet40
-s 0x001BDAA0=OnReceive_TxSet48
-s 0x001BDAAE=OnReceive_TxSet4B
-s 0x001BDAB0=OnReceive_TxSet4E
-s 0x001BDABE=OnReceive_TxSet44
-s 0x001BDACC=OnReceive_TxSet4A
-s 0x001BDADA=OnReceive_TxSet29
-s 0x001BDAE8=OnReceive_TxSet2A
-s 0x001BDAF6=OnReceive_TxSet4F
-s 0x001BDB04=OnReceive_TxSet51
-s 0x001BDB12=OnReceive_TxSet52
-s 0x001BDB20=OnReceive_TxSet54
-s 0x001BDB2E=OnReceive_TxSet59
-s 0x001BDB3C=OnReceive_TxSet5B
-s 0x001BDB4A=OnReceive_TxSet5C
-s 0x001BDB58=OnReceive_TxSet5D
-s 0x001BDB66=OnReceive_TxSet5F
-s 0x001BDB74=OnReceive_TxSet60
-s 0x00229BCE=ptp_GetFCxxFExxTableAddress
-s 0x00229BE0=ptpFunctionFC01
-s 0x00229CA6=ptpFunctionFC02
-s 0x00229D86=ptpFunctionFE01
-s 0x00229E62=ptpFunctionFE02
-s 0x00229F88=ptpFunctionFE03
-s 0x0022A05C=ptpFunctionFE04
-s 0x0022A154=ptpFunctionFE05
-s 0x0022A294=ptpFunctionFD31
-s 0x0022A300=ptpFunctionFE31
-s 0x0022A378=ptpFunctionFC31
-s 0x0022A492=ptpFunctionFC32
-s 0x0022A5F4=ptpFunctionFDC1
-s 0x0022A65E=ptpFunctionFEC1
-s 0x0022A73A=ptpFunctionFCC1
-s 0x0022A822=ptpFunctionFD1C
-s 0x0022A89C=ptpFunctionFE1C
-s 0x0022A9D0=ptpFunctionFD1D
-s 0x0022AA34=ptpFunctionFE1D
-s 0x0022AAEA=ptpFunctionFC1D
-s 0x0022AB34=ptpFunctionFD1E
-s 0x0022AC24=ptpFunctionFE1E
-s 0x0022AD78=ptpFunctionFC41
-s 0x0022ADCC=ptpFunctionFC42
-s 0x0022AE20=ptpFunctionFE41
-s 0x0022AFE8=ptpFunctionFE42
-s 0x0022B116=ptpFunctionFC44
-s 0x0022B1D6=ptpFunctionFC45
-s 0x0022B2C4=ptpFunctionFC46
-s 0x0022B394=ptpFunctionFE4C
-s 0x0022B46E=ptpFunctionFC4D
-s 0x0022B4B8=ptpFunctionFC51
-s 0x0022B69A=ptpFunctionFC52
-s 0x0022B6F8=ptpFunctionFC55
-s 0x0022B870=ptpFunctionFD56
-s 0x0022B932=ptpFunctionFC57
-s 0x0022B9E4=ptpFunctionFE59
-s 0x0022BA66=ptpFunctionFC59
-s 0x0022BB3E=ptpFunctionFC5A
-s 0x0022BE5C=ptpFunctionFC5B
-s 0x0022BEBC=ptpFunctionFC5C
-s 0x0022BF56=ptpFunctionFD63
-s 0x0022C01E=ptpFunctionFE63
-s 0x0022C156=ptpFunctionFD80
-s 0x0022C2F6=ptpFunctionFC81
-s 0x0022C3C6=ptpFunctionFC82
-s 0x0022C46E=ptpFunctionFC91
-s 0x0022C522=ptpFunctionFE91
-s 0x0022C638=ptpFunctionFE93
-s 0x0022C6DC=ptpFunctionFC93
-s 0x0022C79C=ptpFunctionFC94
-s 0x0022C8B2=ptpFunctionFC96
-s 0x0022C912=ptpFunctionFC97
-s 0x0022CB44=ptpFunctionFD97
-s 0x0022CD6C=ptpFunctionFE97
-s 0x0022CE82=ptpFunctionFE98
-s 0x0022D000=ptpFunctionFE99
-s 0x0022D096=ptpFunctionFE57
-s 0x0022D1C2=ptpFunctionFCA1
-s 0x0022D31C=ptpFunctionFCA2
-s 0x0022D41C=ptpFunctionFCA3
-s 0x0022D532=ptpFunctionFCA4
-s 0x0022D64E=ptpFunctionFCA5
-s 0x0022D6AA=ptpFunctionFCA6
-s 0x0022D7A6=ptpFunctionFCAA
-s 0x0022D8BC=ptpFunctionFCAB
-s 0x0022D9E4=ptpFunctionFCAC
-s 0x0022DB92=ptpFunctionFDB1
-s 0x0022DC24=ptpFunctionFEB1
-s 0x0022DDE2=ptpFunctionFDB2
-s 0x0022DF9E=ptpFunctionFEB2
-s 0x0022E088=ptpFunctionFDE1
-s 0x0022E0E4=ptpFunctionFCFE
-s 0x0022E2A6=ptpFunctionFCFF
-s 0x0022E34C=ptpFunctionFC70
-s 0x0022E450=ptpFunctionFD34
-s 0x0022E490=ptpFunctionFE34
-s 0x0022E5F4=ptpFunctionFD35
-s 0x0022E746=ptpFunctionFE35
-s 0x0022E90C=ptpFunctionFC35
-s 0x0022EA3A=ptpFunctionFCAD
-s 0x0022EB5A=ptpFunctionFCAE
-s 0x0022ED3E=ptpFunctionFDE3
-s 0x0022EE4A=ptpFunctionFEE3
-s 0x0022F020=ptpFunctionFC73
-s 0x0022FD6A=ptpFindFunctionCode
-s 0x00230182=ptp_Get10xxTableAddress
-s 0x0023018A=ptpFunction1001
-s 0x002303B0=ptpFunction1002
-s 0x002305A6=ptpFunction1003
-s 0x002306B4=ptpFunction1004
-s 0x00230806=ptpFunction1005
-s 0x00230B98=ptpFunction1006
-s 0x0023135C=ptpFunction1007
-s 0x00231E74=ptpFunction1008
-s 0x00233AF6=ptpFunction1009
-s 0x0023421E=ptpFunction100A
-s 0x00234964=ptpFunction100B
-s 0x0023559E=ptpFunction100C
-s 0x0023588C=ptpFunction100D
-s 0x002359FC=ptpFunction100E
-s 0x002366CE=ptpFunction100F
-s 0x00236B1C=ptpFunction1014
-s 0x00236BEC=ptpFunction1015
-s 0x00236CBC=ptpFunction1016
-s 0x00236E04=ptpFunction101B
-s 0x00237600=ptpFunction90E8
-s 0x00239ECA=ptp_ResponceError
-s 0x0023B610=ptpFunction90C0
-s 0x0023B6A4=ptpFunction90C1
-s 0x0023BBAA=ptpFunction90C2
-s 0x0023BE92=ptpFunction90C3
-s 0x0023C380=ptpFunction90C4
-s 0x0023CAD4=ptpFunction90C7
-s 0x0023CC3C=ptpFunction90C8
-s 0x0023CE9C=ptpFunction90C9
-s 0x0023CF4C=ptpFunction90CA
-s 0x0023D03C=ptpFunction90CB
-s 0x0023D0D6=ptpFunction90CC
-s 0x0023D5BA=ptpFunction90CD
-s 0x0023DC84=ptpFunction90CE
-s 0x0023DE3C=ptpFunction90CF
-s 0x0023E17C=ptpFunction9201
-s 0x0023E63C=ptpFunction9202
-s 0x0023E6DA=ptpFunction9203
-s 0x0023E99C=ptpFunction9204
-s 0x0023ED44=ptpFunction9205
-s 0x0023EF00=ptpFunction9206
-s 0x0023EFA8=ptpFunction9207
-s 0x002402B2=ptpFunction9209
-s 0x002403BC=ptpFunction920A
-s 0x00240586=ptpFunction920B
-s 0x00240622=ptpFunction920C
-s 0x00240734=ptpFunction9400
-s 0x00240E46=ptpFunction9801
-s 0x00240FB4=ptpFunction9802
-s 0x002411A0=ptpFunction9803
-s 0x002412DE=ptpFunction9805
-s 0x0025CE0E=getHalfWord_LE(R4 [IN ptr; OUT halfword])
-s 0x0025CE3E=getWord_LE(R4 [IN ptr; OUT halfword])
-s 0x0025D5A2=ptpIsFunctionCode1xxx
-s 0x002821C0=FS_readdir(R4 [IN handle; OUT err], R5 [IN ptr_fsdirent])
-s 0x002824E2=FS_closedir(R4 [IN handle; OUT err])
-s 0x0028ECFC=FS_getPathDrive(R4 [IN path; OUT err], R5 [IN for_drivename], R6 [IN ptr_ptr_rest_path])
-s 0x00290506=SUB_double(R4 [IN aHi; OUT resHi], R5 [IN aLo; OUT resLo], R6 [IN bHi], R7 [IN bLo])
-s 0x0029050C=ADD_double(R4 [IN aHi; OUT resHi], R5 [IN aLo; OUT resLo], R6 [IN bHi], R7 [IN bLo])
-s 0x002906F4=SUB_float(R4 [IN floatA; OUT res], R5 [IN floatB])
-s 0x002906FA=ADD_float(R4 [IN floatA; OUT res], R5 [IN floatB])
-s 0x002907EA=ADD_uint64(R4 [IN aHi; OUT resHi], R5 [IN aLo; OUT resLo], R6 [IN bHi], R7 [IN bLo])
-s 0x002907F0=AND_uint64(R4 [IN aHi; OUT resHi], R5 [IN aLo; OUT resLo], R6 [IN bHi], R7 [IN bLo])
-s 0x002907F6=CMP_double(R4 [IN aHi; OUT res], R5 [IN aLo], R6 [IN bHi], R7 [IN bLo])
-s 0x00290828=CMP_float(R4 [IN floatA; OUT res], R5 [IN floatB])
-s 0x00290852=CMP_int64(R4 [IN aHi; OUT res], R5 [IN aLo], R6 [IN bHi], R7 [IN bLo])
-s 0x00290864=CMP_uint64(R4 [IN aHi; OUT res], R5 [IN aLo], R6 [IN bHi], R7 [IN bLo])
-s 0x002908B0=DIV_double(R4 [IN dividendHi; OUT quotHi], R5 [IN dividendLo; OUT quotLo], R6 [IN diviHi], R7 [IN diviLo])
-s 0x00290AB8=DIV_float(R4 [IN dividend; OUT quot], R5 [IN divisor])
-s 0x00290B5A=DIV_int(R4 [IN dividend; OUT quotient], R5 [IN divisor])
-s 0x00290BA8=DIV_int64(R4 [IN dividendHi; OUT quotHi], R5 [IN dividendLo; OUT quotLo], R6 [IN divHi], R7 [IN divLo])
-s 0x00290BE6=dtoi(R4 [IN doubleHi; OUT int], R5 [IN doubleLo])
-s 0x00290C24=dtoui(R4 [IN doubleHi; OUT uint], R5 [IN doubleLo])
-s 0x00290C62=ftod(R4 [IN float; OUT doubleHi], R5 [OUT doubleLo])
-s 0x00290C8A=itod(R4 [IN int; OUT doubleHi], R5 [OUT doubleLo])
-s 0x00290CA4=itof(R4 [IN int; OUT float])
-s 0x00290CBE=int2int64(R4 [IN int; OUT resHi], R5 [OUT resLo])
-s 0x00290CC4=int64toint(R4 [IN hi; OUT res], R5 [IN lo])
-s 0x00290CC8=MOD_int(R4 [IN dividend; OUT remainder], R5 [IN divisor])
-s 0x00290DA0=MUL_double(R4 [IN aHi; OUT resHi], R5 [IN aLo; OUT resLo], R6 [IN bHi], R7 [IN bLo])
-s 0x00290EA4=MUL_float(R4 [IN floatA; OUT resFloat], R5 [IN floatB])
-s 0x00290F18=MUL_uint64(R4 [IN aHi; OUT resHi], R5 [IN aLo; OUT resLo], R6 [IN bHi], R7 [IN bLo])
-s 0x00290F2C=OR_uint64(R4 [IN aHi; OUT resHi], R5 [IN aLo; OUT resLo], R6 [IN bHi], R7 [IN bLo])
-s 0x00290F32=SHL_uint64(R4 [IN aHi; OUT resHi], R5 [IN aLo; OUT resLo], R6 [IN shiftHi], R7 [IN shiftLo])
-s 0x00290F4E=SAR_uint64(R4 [IN aHi; OUT resHi], R5 [IN aLo; OUT resLo], R6 [IN shiftHi], R7 [IN shiftLo])
-s 0x00290F6A=SHR_uint64(R4 [IN aHi; OUT resHi], R5 [IN aLo; OUT resLo], R6 [IN shiftHi], R7 [IN shiftLo])
-s 0x00290F86=SUB_uint64(R4 [IN aHi; OUT resHi], R5 [IN aLo; OUT resLo], R6 [IN bHi], R7 [IN bLo])
-s 0x00290F8C=DIV_uint(R4 [IN dividend; OUT quotient], R5 [IN divisor])
-s 0x00290FD4=DIV_uint64(R4 [IN dividendHi; OUT quotHi], R5 [IN dividendLo; OUT quotLo], R6 [IN divHi], R7 [IN divLo])
-s 0x00291002=uint2double(R4 [IN uint; OUT doubleHi], R5 [OUT doubleLo])
-s 0x0029104C=uint2float(R4 [IN uint; OUT float])
-s 0x0029109E=uint2uint64(R4 [IN uint; OUT uint64Hi], R5 [OUT uint64Lo])
-s 0x002910A4=MOD_uint(R4 [IN dividend; OUT remainder], R5 [IN divisor])
-s 0x002910EC=MOD_uint64(R4 [IN dividendHi; OUT remHi], R5 [IN dividendLo; OUT remLo], R6 [IN divHi], R7 [IN divLo])
-s 0x00291126=abs(R4 [IN value; OUT res])
-s 0x00291134=atan2(R4 [IN doubleYHi; OUT outHi], R5 [IN doubleYLo; OUT outLo], R6 [IN doubleXHi], R7 [IN doubleXLo])
-s 0x002912A8=atoi(R4 [IN str; OUT int])
-s 0x00291316=ceil(R4 [IN doubleHi; OUT outHi], R5 [IN doubleLo; OUT outLo])
-s 0x002913FC=floor(R4 [IN doubleHi; OUT outHi], R5 [IN doubleLo; OUT outLo])
-s 0x002914F4=isdigit(R4 [IN char; OUT yes])
-s 0x00291504=abs_291504(R4 [IN value; OUT res])
-s 0x00291512=log(R4 [IN doubleXHi; OUT outHi], R5 [IN doubleXLo; OUT outLo], R6 [IN doubleYHi], R7 [IN doubleYLo])
-s 0x0029171C=memcmp(R4 [IN source1; OUT res], R5 [IN source2], R6 [IN count])
-s 0x00291736=memcpy(R4 [IN dst; OUT dst], R5 [IN source], R6 [IN count])
-s 0x00291746=memmove(R4 [IN dst; OUT dst], R5 [IN source], R6 [IN count])
-s 0x00291768=memset(R4 [IN dst; OUT dst], R5 [IN val], R6 [IN count])
-s 0x00291776=pow(R4 [IN doubleXHi; OUT outHi], R5 [IN doubleXLo; OUT outLo], R6 [IN doubleYHi], R7 [IN doubleYLo])
-s 0x00291F04=rand(R4 [OUT value])
-s 0x00291F3C=sprintf(R4 [IN dst; OUT chars], R5 [IN formatstring], R6 [IN param3], R7 [IN param4])
-s 0x00291FD6=sqrt(R4 [IN doubleHi; OUT outHi], R5 [IN doubleLo; OUT outLo])
-s 0x002921B4=strcat(R4 [IN dst; OUT dst], R5 [IN src])
-s 0x002921CE=strchr(R4 [IN ptr; OUT pos], R5 [IN char])
-s 0x002921E0=strcmp(R4 [IN str1; OUT res], R5 [IN str2]))
-s 0x002921F4=strcpy(R4 [IN dst; OUT dst], R5 [IN src])
-s 0x00292202=strlen(R4 [IN ptr; OUT len])
-s 0x00292212=strncat(R4 [IN dst; OUT dst], R5 [IN src], R6 [IN n])
-s 0x00292236=strncmp(R4 [IN str1; OUT res], R5 [IN str2], R6 [IN n])
-s 0x00292254=strncpy(R4 [IN dst; OUT dst], R5 [IN src], R6 [IN n])
-s 0x00292274=strstr(R4 [IN where; OUT pos], R5 [iN what])
-s 0x002922A6=strtok(R4 [IN str; OUT ptr_token], R5 [IN ptr_delimeters])
-s 0x0029233C=strtol(R4 [IN str; OUT int], R5 [IN ptr_endptr], R6 [IN base])
-s 0x002923C6=vsprintf(R4 [IN dst; OUT chars], R5 [IN formatstring], R6 [IN va_list])
-s 0x0029336A=atan(R4 [IN doubleHi; OUT outHi], R5 [IN doubleLo; OUT outLo])

# global data
-s 0x00040E24=SetupTCB
-s 0x00040D22=StartIdleTask
-s 0x000D1244=tblTaskData
-s 0x0031AD3C=txSetsTableV2
-s 0x003EF47C=ptpTable10xxV2
-s 0x003EF720=ptpTable9xxxV2
-s 0x003EEA6C=ptpTableCodeFCxxV2
-s 0x003F3544=ptpTableOther
-s 0x68003828=pCurrentTCB
-s 0x84E22688=txSet3E
-s 0x84E226D4=txSet2E
-s 0x84E22714=txSet2F
-s 0x84E22754=txSet30
-s 0x84E22794=txSet22
-s 0x84E22890=txSet11
-s 0x84E228A8=txSet45
-s 0x84E228FA=txSet41
-s 0x84E228FE=txSet40
-s 0x84E22902=txSet38
-s 0x84E22904=txSet10
-s 0x84E22908=txSet0F
-s 0x84E22912=txSet5F
-s 0x84E2291F=txSet5E
-s 0x84E2292C=txSet5D
-s 0x84E229EB=txSet5C
-s 0x84E22A8B=txSet5B
-s 0x84E22A8C=txSet5A
-s 0x84E22AA8=txSet59
-s 0x84E22AB0=txSet58
-s 0x84E22AB8=txSet57
-s 0x84E22B39=txSet56
-s 0x84E22B95=txSet55
-s 0x84E22BA5=txSet54
-s 0x84E22BB8=txSet53
-s 0x84E22C1C=txSet52
-s 0x84E22C42=txSet51
-s 0x84E22C49=txSet50
-s 0x84E22C50=txSet4F
-s 0x84E22D50=txSet4E
-s 0x84E22D78=txSet4C
-s 0x84E22D79=txSet4B
-s 0x84E22D7A=txSet4A
-s 0x84E22E04=txSet49
-s 0x84E22E84=txSet48
-s 0x84E22E8A=txSet47
-s 0x84E22E8C=txSet46
-s 0x84E22E8D=txSet44
-s 0x84E22E8F=txSet43
-s 0x84E22EA7=txSet42
-s 0x84E22EAA=txSet3F
-s 0x84E22FA6=txSet3D
-s 0x84E22FF2=txSet3C
-s 0x84E2300C=txSet3B
-s 0x84E2300E=txSet3A
-s 0x84E2300F=txSet39
-s 0x84E23010=txSet37
-s 0x84E23011=txSet36
-s 0x84E23012=txSet35
-s 0x84E23013=txSet34
-s 0x84E23014=txSet33
-s 0x84E23021=txSet32
-s 0x84E23024=txSet31
-s 0x84E23025=txSet2D
-s 0x84E23054=txSet2C
-s 0x84E2305F=txSet2B
-s 0x84E2306A=txSet2A
-s 0x84E2306D=txSet29
-s 0x84E23070=txSet28
-s 0x84E23072=txSet27
-s 0x84E2309E=txSet26
-s 0x84E230BC=txSet25
-s 0x84E230E9=txSet24
-s 0x84E23110=txSet23
-s 0x84E23124=txSet21
-s 0x84E23125=txSet20
-s 0x84E2321F=txSet1F
-s 0x84E2331B=txSet1E
-s 0x84E2331C=txSet1C
-s 0x84E2331E=txSet1B
-s 0x84E23333=txSet1A
-s 0x84E23347=txSet19
-s 0x84E23349=txSet18
-s 0x84E2334C=txSet17
-s 0x84E23351=txSet16
-s 0x84E23355=txSet15
-s 0x84E2336F=txSet14
-s 0x84E23389=txSet13
-s 0x84E233A3=txSet12
-s 0x84E233B0=txSet0E
-s 0x84E233B3=txSet0D
-s 0x84E233B4=txSet0C
-s 0x84E233BA=txSet0B
-s 0x84E233CF=txSet09
-s 0x84E233D5=txSet08
-s 0x84E233F2=txSet07
-s 0x84E2340F=txSet06
-s 0x84E2343C=txSet05
-s 0x84E23483=txSet04
-s 0x84E2349D=txSet03
-s 0x84E234AC=txSet02
-s 0x84E234B2=txSet01
-s 0x84E6D799=txSet0A

