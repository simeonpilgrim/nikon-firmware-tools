# The main part of this file describes the D700 "B" firmware, ver 1.03
# Two special parts are also included but commented out :
# - the ROM part at 0x000E0000
#
# Use in Emulator or
# startDfr.bat -wstructure -wparameters -wint40 -wmemory -waddress -whexcode -x b700_103.dfr.txt -o b700_103.asm b700_103.bin

############################### File map:
-i 0x00040000-0x0073FFFF=0x00000000

############################### Memory map:

-m 0x00040000-0x000404FD=CODE


# Table of offsets used by INT 0x40 :
-m 0x000404FE-0x0004065D=DATA:W

-m 0x0004065D-0x0004073B=CODE

# Softune RTOS Copyright :
-m 0x0004073C-0x000407A7=DATA:L

# ITRON kernel code
-m 0x000407A8-0x00050E49=CODE

# tblTaskData
-m 0x00054BCC-0x00054EDF=DATA:L

# Interrupt vector table.
-t 0x000EFC00


-m 0x00120000-0x001BA87F=CODE

-m 0x00204BAC-0x002886E1=CODE

############################### Symbols

# syscalls
-s 0x0004065E=sys_unsupported_function (R12 [OUT err_code])
-s 0x00040662=sys_reserved_function (R12 [OUT err_code])
-s 0x00040EB0=sys_set_tim(R4 [IN ptr_to_pk_tim], R12 [OUT err_code] /* Set System Clock */)
-s 0x00040ECE=sys_get_tim(R4 [IN ptr_to_pk_tim], R12 [OUT err_code] /* Get System Clock */)
-s 0x00040EEC=sys_dly_tsk(R4 [IN dly_tim], R12 [OUT err_code] /* Delay Task */)
-s 0x00040F48=sys_def_cyc(R4 [IN cycno], R5 [IN ptr_to_pk_dcyc], R12 [OUT err_code] /* Define Cyclic Handler */)
-s 0x00040FC6=sys_act_cyc(R4 [IN cycno], R5 [IN cycact], R12 [OUT err_code] /* Activate Cyclic Handler */)
-s 0x0004102C=sys_ref_cyc(R4 [IN ptr_to_pk_rcyc], R5 [IN cycno], R12 [OUT err_code] /* Get Cyclic Handler Status */)
-s 0x000410AE=sys_def_alm(R4 [IN almno], R5 [IN ptr_to_pk_dalm], R12 [OUT err_code] /* Define Alarm Handler */)
-s 0x0004113C=sys_ref_alm(R4 [IN ptr_to_pk_ralm], R5 [IN almno], R12 [OUT err_code] /* Get Alarm Handler Status */)
-s 0x000411AE=sys_sus_tsk(R4 [IN tsk_id], R12 [OUT err_code] /* Suspend Other Task */)
-s 0x00041232=sys_rsm_tsk(R4 [IN tsk_id], R12 [OUT err_code] /* Resume Suspended Task */)
-s 0x000412BA=sys_frsm_tsk(R4 [IN tsk_id], R12 [OUT err_code] /* Forcibly Resume suspended Task */)
-s 0x0004131A=sys_slp_tsk(R12 [OUT err_code] /* Sleep Task */)
-s 0x00041350=sys_tslp_tsk(R4 [IN timeout], R12 [OUT err_code] /* Sleep Task with Timeout */)
-s 0x000413D4=sys_wup_tsk(R4 [IN tsk_id], R12 [OUT err_code] /* Wakeup Other Task */)
-s 0x00041436=sys_can_wup(R4 [IN tsk_id], R12 [OUT err_code], R13 [OUT wakeup_count] /* Cancel Wakeup Request */)
-s 0x0004149A=sys_sta_tsk(R4 [IN tsk_id], R5 [IN tsk_param], R12 [OUT err_code] /* Start Task */)
-s 0x00041518=sys_ext_tsk(R12 [OUT err_code] /* Exit Issuing Task */)
-s 0x00041572=sys_ter_tsk(R4 [IN tsk_id], R12 [OUT err_code] /* Terminate Other Task */)
-s 0x00041610=sys_dis_dsp(R12 [OUT err_code] /* Disable Dispatch */)
-s 0x00041632=sys_ena_dsp(R12 [OUT err_code] /* Enable Dispatch */)
-s 0x0004164E=sys_chg_pri(R4 [IN tsk_id], R5 [IN tsk_prio], R12 [OUT err_code] /* Change Task Priority */)
-s 0x000416B6=sys_rot_rdq(R4 [IN tsk_prio], R12 [OUT err_code] /* Rotate Tasks on the Ready Queue */)
-s 0x0004171C=sys_rel_wai(R4 [IN tsk_id], R12 [OUT err_code] /* Release Wait of Other Task */)
-s 0x0004179E=sys_get_tid(R12 [OUT err_code], R13 [OUT tsk_id] /* Get Task Identifier */)
-s 0x000417BE=sys_ref_tsk(R4 [IN ptr_to_pk_rtsk], R5 [IN tsk_id], R12 [OUT err_code] /* Get Task Status */)
-s 0x00041892=sys_sig_sem(R4 [IN sem_id], R12 [OUT err_code] /* Signal Semaphore */)
-s 0x000418D4=sys_wai_sem(R4 [IN sem_id], R12 [OUT err_code] /* Wait on Semaphore */)
-s 0x00041916=sys_preq_sem(R4 [IN sem_id], R12 [OUT err_code] /* Poll and request Semaphore */)
-s 0x0004194A=sys_twai_sem(R4 [IN sem_id], R5 [IN timeout], R12 [OUT err_code] /* Wait on Semaphore with Timeout */)
-s 0x000419D0=sys_ref_sem(R4 [IN ptr_to_pk_rsem], R5 [IN sem_id], R12 [OUT err_code] /* Get Semaphore Status */)
-s 0x00041A1A=sys_set_flg(R4 [IN flag_id], R5 [IN set_pattern], R12 [OUT err_code] /* Set Eventflag */)
-s 0x00041AB4=sys_clr_flg(R4 [IN flag_id], R5 [IN clr_pattern], R12 [OUT err_code] /* Clear Eventflag */)
-s 0x00041ADC=sys_wai_flg(R5 [IN flag_id], R6 [IN wai_pattern], R7 [IN wait_flag_mode], R12 [OUT err_code], R13 [OUT flag_pattern] /* Wait for Eventflag */)
-s 0x00041B64=sys_pol_flg(R5 [IN flag_id], R6 [IN wai_pattern], R7 [IN wait_flag_mode], R12 [OUT err_code], R13 [OUT flag_pattern] /* Wait for Eventflag, polling */)
-s 0x00041BBC=sys_twai_flg(R5 [IN flag_id], R6 [IN wai_pattern], R7 [IN wait_flag_mode], R12 [OUT err_code], R13 [IN timeout; OUT flag_pattern] /* Wait for Eventflag, with Timeout */)
-s 0x00041C7A=sys_ref_flg(R4 [IN ptr_to_pk_rflg], R5 [IN flag_id], R12 [OUT err_code] /* Get Eventflag Status */)
-s 0x00041CB0=sys_snd_msg(R4 [IN mailbox_id], R5 [IN ptr_to_pk_msg], R12 [OUT err_code] /* Send Message to Mailbox */)
-s 0x00041D0A=sys_rcv_msg(R5 [IN mailbox_id], R12 [OUT err_code], R13 [OUT ptr_to_pk_msg] /* Receive Message from Mailbox */)
-s 0x00041D5A=sys_prcv_msg(R5 [IN mailbox_id], R12 [OUT err_code], R13 [OUT ptr_to_pk_msg] /* Receive Message from Mailbox, polling */)
-s 0x00041DA8=sys_trcv_msg(R5 [IN mailbox_id], R6 [IN timeout], R12 [OUT err_code], R13 [OUT ptr_to_pk_msg] /* Receive Message from Mailbox, with Timeout */)
-s 0x00041E2A=sys_ref_mbx(R4 [IN ptr_to_pk_rmbx], R5 [IN mailbox_id], R12 [OUT err_code] /* Get Mailbox Status */)
-s 0x00041EAE=sys_get_blk(R5 [IN mempool_id], R6 [IN blk_size], R12 [OUT err_code], R13 [OUT blk_start] /* Get Variable-Sized Memory Block */)
-s 0x00041FA2=sys_pget_blk(R5 [IN mempool_id], R6 [IN blk_size], R12 [OUT err_code], R13 [OUT blk_start] /* Get Variable-Sized Memory Block, polling */)
-s 0x000420A2=sys_rel_blk(R4 [IN mempool_id], R5 [OUT blk_start], R12 [OUT err_code] /* Release Variable-Sized Memory Block */)
-s 0x00042260=sys_ref_mpl(R4 [IN ptr_to_pk_rmempool], R5 [IN mempool_id], R12 [OUT err_code] /* Get Variable-Sized Memorypool Status */)
-s 0x000422DA=sys_get_blf(R5 [IN mempool_f_id], R12 [OUT err_code], R13 [OUT blk_f_start] /* Get Fixed-Sized Memory Block */)
-s 0x00042336=sys_pget_blf(R5 [IN mempool_f_id], R12 [OUT err_code], R13 [OUT blk_f_start] /* Poll and Get Fixed-Sized Memory Block */)
-s 0x0004237A=sys_tget_blf(R5 [IN mempool_f_id], R6 [IN timeout], R12 [OUT err_code], R13 [OUT blk_f_start] /* Get Fixed-Sized Memory Block with Timeout */)
-s 0x0004241C=sys_rel_blf(R4 [IN mempool_f_id], R5 [IN ptr; OUT blk_f_start], R12 [OUT err_code] /* Release Fixed-Sized Memory Block */)
-s 0x000424EA=sys_ref_mpf(R4 [IN ptr_to_pk_rmempool_f], R5 [IN mempool_f_id], R12 [OUT err_code] /* Get Fixed-Sized Memorypool Status */)
-s 0x00042526=sys_loc_cpu(R12 [OUT err_code] /* Lock CPU */)
-s 0x0004253A=sys_unl_cpu(R12 [OUT err_code] /* Unlock CPU */)
-s 0x0004254E=sys_chg_ilm(R4 [IN ilmask], R12 [OUT err_code] /* Change Interrupt Level Mask */)
-s 0x00042576=sys_ref_ilm(R12 [OUT err_code], R13 [OUT ilmask] /* Get Interrupt Level Mask */)
-s 0x0004259A=sys_get_ver(R4 [IN ptr_to_pk_ver], R12 [OUT err_code] /* Get Version Information */)
-s 0x000425D6=sys_ref_sys(R4 [IN ptr_to_pk_rsys], R12 [OUT err_code] /* Get System Status */)

# tasks
-s 0x0004087E=SetupTCB
-s 0x000407A8=StartIdleTask

-s 0x001500D6=task_0x01(R4 [IN param])
-s 0x001200AC=task_0x02(R4 [IN param] /* Autorun */)
-s 0x0012BA62=task_0x03(R4 [IN param])
-s 0x001269BE=task_0x04(R4 [IN param])
-s 0x0012CC72=task_0x05(R4 [IN param])
-s 0x001275D4=task_0x06(R4 [IN param])
-s 0x001749E6=task_0x07(R4 [IN param])
-s 0x001702C4=task_0x08(R4 [IN param])
-s 0x00133E2C=task_0x09(R4 [IN param])
-s 0x0012F1DA=task_0x0A(R4 [IN param])
-s 0x0012F1E8=task_0x0B(R4 [IN param])
-s 0x0012F598=task_0x0C(R4 [IN param])
-s 0x0012F5A6=task_0x0D(R4 [IN param])
-s 0x0012F988=task_0x0E(R4 [IN param])
-s 0x0012F996=task_0x0F(R4 [IN param])
-s 0x0014AAD2=task_0x10(R4 [IN param])
-s 0x001364CA=task_0x11(R4 [IN param])
-s 0x001728D0=task_0x12(R4 [IN param])
-s 0x001977E6=task_0x13(R4 [IN param])
-s 0x0019945C=task_0x14(R4 [IN param])
-s 0x0015C17E=task_0x15(R4 [IN param])
-s 0x00268B82=task_0x16(R4 [IN param])
-s 0x0021752C=task_0x17(R4 [IN param])
-s 0x001999B8=task_0x18(R4 [IN param])
-s 0x001974C2=task_0x19(R4 [IN param])
-s 0x0012EED4=task_0x1A(R4 [IN param])
-s 0x0015AAFC=task_0x1B(R4 [IN param])
-s 0x0015AB48=task_0x1C(R4 [IN param])

# global data
-s 0x00054BCC=tblTaskData
-s 0x68000000=pCurrentTCB
-s 0x001BFD88=txSetsTable
-s 0x001D1B84=ptpTable10xx
-s 0x001D291C=ptpTable90E8_90FE
-s 0x001D1A94=ptpTable91xx
-s 0x001D1AD4=ptpTable9000_92xx
-s 0x001D1AAC=ptpTable98xx
-s 0x001D20C0=ptpTableCodeFCxx_FExx
-s 0x00202B1C=NOP_VIVID
-s 0x9F025834=txSet3E
-s 0x9F025854=txSet3D
-s 0x9F0258C0=txSet3C
-s 0x9F0258C4=txSet3A
-s 0x9F0258D0=txSet2E
-s 0x9F025910=txSet2F
-s 0x9F025950=txSet30
-s 0x9F025990=txSet22
-s 0x9F0259FC=txSet11
-s 0x9F025A08=txSet45
-s 0x9F025A3A=txSet43
-s 0x9F025A3C=txSet42
-s 0x9F025A40=txSet41
-s 0x9F025A44=txSet40
-s 0x9F025A46=txSet38
-s 0x9F025A48=txSet03
-s 0x9F025A61=txSet3B
-s 0x9F025A63=txSet39
-s 0x9F025A64=txSet37
-s 0x9F025A65=txSet36
-s 0x9F025A66=txSet35
-s 0x9F025A67=txSet34
-s 0x9F025A68=txSet33
-s 0x9F025A69=txSet32
-s 0x9F025A6C=txSet31
-s 0x9F025A6D=txSet2D
-s 0x9F025A93=txSet2C
-s 0x9F025A9E=txSet2B
-s 0x9F025AA9=txSet2A
-s 0x9F025AAC=txSet29
-s 0x9F025AAF=txSet28
-s 0x9F025AB1=txSet27
-s 0x9F025AD6=txSet26
-s 0x9F025AF3=txSet25
-s 0x9F025B20=txSet24
-s 0x9F025B49=txSet23
-s 0x9F025B5D=txSet21
-s 0x9F025B5E=txSet20
-s 0x9F025C5D=txSet1F
-s 0x9F025D5C=txSet1E
-s 0x9F025D5D=txSet1C
-s 0x9F025D5F=txSet1B
-s 0x9F025DD7=txSet1A
-s 0x9F025DDE=txSet19
-s 0x9F025DDF=txSet18
-s 0x9F025DE1=txSet17
-s 0x9F025DE2=txSet16
-s 0x9F025DE6=txSet15
-s 0x9F025E00=txSet14
-s 0x9F025E0B=txSet13
-s 0x9F025E16=txSet12
-s 0x9F025E1E=txSet10
-s 0x9F025E1F=txSet0E
-s 0x9F025E22=txSet0D
-s 0x9F025E23=txSet0C
-s 0x9F025E27=txSet0B
-s 0x9F025E30=txSet0A
-s 0x9F025E36=txSet09
-s 0x9F025E3C=txSet08
-s 0x9F025E4E=txSet07
-s 0x9F025E60=txSet06
-s 0x9F025E82=txSet05
-s 0x9F025EBC=txSet04
-s 0x9F025ED4=txSet02
-s 0x9F025EDA=txSet01

# other
-s 0x00040A16=UpdateClock_ms()
-s 0x00041812=krnl_TableGetRecord(R14 [IN ptr_table; OUT ptr_record], R4 [IN index_1_based])
-s 0x00124FC8=dlist_init(R4 [IN ptr_to_list] /*creates sentinel node at the beginning*/)
-s 0x00124FD0=dlist_is_empty(R4 [IN ptr_to_element; OUT is_empty] )
-s 0x00124FDC=dlist_insert_before(R4 [IN ptr_to_element], R5 [IN ptr_to_new_element] /*insert R5 before R4*/)
-s 0x00124FEC=dlist_insert_after(R4 [IN ptr_to_element], R5 [IN ptr_to_new_element] /*insert R5 after R4*/)
-s 0x00124FFC=dlist_remove(R4 [IN ptr_to_element] /*remove R4 element*/)
-s 0x0012500C=dlist_remove_previous(R4 [IN ptr_to_element] /*remove item before R4*/)
-s 0x00125022=dlist_remove_next(R4 [IN ptr_to_element] /*remove item after R4*/)
-s 0x00125ED0=LowPriority_WaitSem(R4 [IN sem_id])
-s 0x00125F0E=LowPriority_PollSem(R4 [IN sem_id; OUT error_code])
-s 0x00125F56=LowPriority_SigSem(R4 [IN sem_id])
-s 0x00126006=crc16(R4 [IN size; OUT crc16], R5 [IN ptr_buf])
-s 0x00126518=EncryptData(R4 [IN ptr_data], R5 [IN size], R6 [IN IV], R7 [IN ptr_key])
-s 0x001265CC=memcpy_fast(R4 [IN dst], R5 [IN src], R6 [IN count])
-s 0x001265FE=memset_word(R4 [IN dst], R5 [IN word], R6 [IN countBytes])
-s 0x0012662E=memset_fast(R4 [IN dst], R5 [IN byte], R6 [IN count])
-s 0x0012D41E=OnReceive_TxSet00
-s 0x0012D420=OnReceive_TxSet03
-s 0x0012D4A2=OnReceive_TxSet04
-s 0x0012D4D2=OnReceive_TxSet05
-s 0x0012D52E=OnReceive_TxSet06
-s 0x0012D616=OnReceive_TxSet07
-s 0x0012D752=OnReceive_TxSet08
-s 0x0012D98E=OnReceive_TxSet09
-s 0x0012D99C=OnReceive_TxSet0B
-s 0x0012D9F0=OnReceive_TxSet31
-s 0x0012DA14=OnReceive_TxSet0C
-s 0x0012DBBC=OnReceive_TxSet0E
-s 0x0012DC44=OnReceive_TxSet11
-s 0x0012DD2E=OnReceive_TxSet12
-s 0x0012DD38=OnReceive_TxSet14
-s 0x0012DE14=OnReceive_TxSet15
-s 0x0012DE78=OnReceive_TxSet16
-s 0x0012DE8E=OnReceive_TxSet17
-s 0x0012DE90=OnReceive_TxSet18
-s 0x0012DF94=OnReceive_TxSet32
-s 0x0012DFE6=OnReceive_TxSet19
-s 0x0012E04C=OnReceive_TxSet1A
-s 0x0012E058=OnReceive_TxSet1D
-s 0x0012E0C4=OnReceive_TxSet1E
-s 0x0012E0DA=OnReceive_TxSet1F
-s 0x0012E0EA=OnReceive_TxSet20
-s 0x0012E0FA=OnReceive_TxSet21
-s 0x0012E10A=OnReceive_TxSet23
-s 0x0012E10C=OnReceive_TxSet24
-s 0x0012E26C=OnReceive_TxSet26
-s 0x0012E2A8=OnReceive_TxSet27
-s 0x0012E32C=OnReceive_TxSet29
-s 0x0012E33A=OnReceive_TxSet2A
-s 0x0012E394=OnReceive_TxSet2B
-s 0x0012E3A2=OnReceive_TxSet2C
-s 0x0012E402=OnReceive_TxSet2D
-s 0x0012E416=OnReceive_TxSet30
-s 0x0012E484=OnReceive_TxSet33
-s 0x0012E486=OnReceive_TxSet34
-s 0x0012E520=OnReceive_TxSet39
-s 0x0012E540=OnReceive_TxSet3B
-s 0x0012E592=OnReceive_TxSet3E
-s 0x0012E62C=OnReceive_TxSet3C
-s 0x0012E658=OnReceive_TxSet42
-s 0x0014D9B2=call_FlashClear(R4 [IN addr; OUT bool_ok],R5 [IN size])
-s 0x0014D9C4=call_FlashWrite(R4 [IN dstAddr], R5 [IN srcAddr], R6 [IN size])
-s 0x0014D9D6=call_FlashWriteFirmwareOrSettings()
-s 0x00163E5E=ptpFunction1001
-s 0x0016401E=ptpFunction1002
-s 0x001640E6=ptpFunction1003
-s 0x00164174=ptpFunction1004
-s 0x0016424A=ptpFunction1005
-s 0x001644E4=ptpFunction1006
-s 0x001649A4=ptpFunction1007
-s 0x00165184=ptpFunction1008
-s 0x00166738=ptpFunction1009
-s 0x00166CDA=ptpFunction100A
-s 0x00167226=ptpFunction100B
-s 0x00167840=ptpFunction100C
-s 0x00167A76=ptpFunction100D
-s 0x00167BAC=ptpFunction100E
-s 0x00167FE0=ptpFunction100F
-s 0x001680C2=ptpFunction1014
-s 0x001680F0=ptpFunction1015
-s 0x0016811E=ptpFunction1016
-s 0x001681EA=ptpFunction101B
-s 0x001687C8=ptpFunction90C0
-s 0x00168D3C=ptpFunction90C1
-s 0x00168FE8=ptpFunction90C2
-s 0x00169190=ptpFunction90C3
-s 0x001694A0=ptpFunction90C4
-s 0x001697DC=ptpFunction90C7
-s 0x001698A8=ptpFunction90C8
-s 0x0016998A=ptpFunction90C9
-s 0x00169AFA=ptpFunction90CA
-s 0x00169B78=ptpFunction90CB
-s 0x00169E80=ptpFunction90CC
-s 0x0016A184=ptpFunction90CD
-s 0x0016A644=ptpFunction90CE
-s 0x0016A726=ptpFunction90CF
-s 0x0016A930=ptpFunction9200
-s 0x0016ABF8=ptpFunction9201
-s 0x0016AE96=ptpFunction9202
-s 0x0016AEE2=ptpFunction9203
-s 0x0016B006=ptpFunction9204
-s 0x0016B194=ptpFunction9205
-s 0x0016B288=ptpFunction9206
-s 0x0016B358=ptpFunction9801
-s 0x0016B420=ptpFunction9802
-s 0x0016B44E=ptpFunction9803
-s 0x0016B47C=ptpFunction9805
-s 0x0016B4D2=ptpFunction9100
-s 0x0016B52C=ptpFunction9101
-s 0x0016B6BE=ptpFindFunctionCode
-s 0x0016EB18=ptp_ResponceError
-s 0x0016F432=getHalfWord_LE(R4 [IN ptr; OUT halfword])
-s 0x0016F462=getWord_LE(R4 [IN ptr; OUT halfword])
-s 0x001767D8=ptpFunctionFC01
-s 0x00176850=ptpFunctionFC02
-s 0x001768D4=ptpFunctionFE01
-s 0x00176970=ptpFunctionFE02
-s 0x00176A1E=ptpFunctionFE03
-s 0x00176AB2=ptpFunctionFE04
-s 0x00176B62=ptpFunctionFE05
-s 0x00176C14=ptpFunctionFD31
-s 0x00176CA6=ptpFunctionFE31
-s 0x00176D2A=ptpFunctionFC31
-s 0x00176D78=ptpFunctionFC32
-s 0x00176DEA=ptpFunctionFDC1
-s 0x00176E8A=ptpFunctionFEC1
-s 0x00176F0C=ptpFunctionFCC1
-s 0x00176F5A=ptpFunctionFD1C
-s 0x00176FF0=ptpFunctionFE1C
-s 0x0017706A=ptpFunctionFD1D
-s 0x001770CC=ptpFunctionFE1D
-s 0x0017712E=ptpFunctionFC1D
-s 0x001771EE=ptpFunctionFD1E
-s 0x001772D6=ptpFunctionFE1E
-s 0x001773CC=ptpFunctionFD1F
-s 0x0017742E=ptpFunctionFE1F
-s 0x00177490=ptpFunctionFC41
-s 0x001774C6=ptpFunctionFC42
-s 0x001774FC=ptpFunctionFE41
-s 0x001775DA=ptpFunctionFE42
-s 0x0017766C=ptpFunctionFC44
-s 0x001776CE=ptpFunctionFC45
-s 0x00177760=ptpFunctionFC49
-s 0x001777E2=ptpFunctionFC4A
-s 0x00177866=ptpFunctionFC4B
-s 0x001778E4=ptpFunctionFE4C
-s 0x0017795A=ptpFunctionFC4D
-s 0x00177970=ptpFunctionFC51
-s 0x001779B8=ptpFunctionFC52
-s 0x001779EE=ptpFunctionFC53
-s 0x00177A84=ptpFunctionFC55
-s 0x00177AD0=ptpFunctionFC57
-s 0x00177B32=ptpFunctionFE59
-s 0x00177B92=ptpFunctionFC59
-s 0x00177C04=ptpFunctionFC5A
-s 0x00177C56=ptpFunctionFC5B
-s 0x00177C8A=ptpFunctionFC5C
-s 0x00177CB6=ptpFunctionFD80
-s 0x001785B8=ptpFunctionFC81
-s 0x00178626=ptpFunctionFC82
-s 0x00178664=ptpFunctionFC91
-s 0x001786BC=ptpFunctionFE91
-s 0x0017873E=ptpFunctionFE93
-s 0x001787C8=ptpFunctionFC93
-s 0x00178854=ptpFunctionFC94
-s 0x001788CE=ptpFunctionFC96
-s 0x00178928=ptpFunctionFC97
-s 0x001789FE=ptpFunctionFD97
-s 0x00178AA2=ptpFunctionFE97
-s 0x00178B2A=ptpFunctionFE98
-s 0x00178BE4=ptpFunctionFE99
-s 0x00178C46=ptpFunctionFDB1
-s 0x00178C5C=ptpFunctionFEB1
-s 0x00178CE8=ptpFunctionFDB2
-s 0x00178DC8=ptpFunctionFEB2
-s 0x00178E3E=ptpFunctionFCFE
-s 0x00178EFE=ptpFunctionFCFF
-s 0x0017BC30=ptpFunction90E8
-s 0x0017BC8C=ptpFunction90E9
-s 0x0017BD24=ptpFunction90EA
-s 0x0017BD8C=ptpFunction90EB
-s 0x0017BE78=ptpFunction90EC
-s 0x0017BF76=ptpFunction90ED
-s 0x0017C370=ptpFunction90EE
-s 0x0017CA0C=ptpFunction90EF
-s 0x0017CA92=ptpFunction90F0
-s 0x0017CC66=ptpFunction90F1
-s 0x0017CD64=ptpFunction90F3
-s 0x0017CF2E=ptpFunction90F4
-s 0x0017D05E=ptpFunction90F5
-s 0x0017D0A0=ptpFunction90F6
-s 0x0017D0C4=ptpFunction90F7
-s 0x0017D10A=ptpFunction90F8
-s 0x0019D79E=LoadLanguage(R4 [IN index])
-s 0x001A5FA6=I2C_request
-s 0x001AA22A=LoadOptionalPictureControl(R4 [IN ptr_buf; OUT ok])
-s 0x001B1E9A=FS_readdir(R4 [IN handle; OUT err], R5 [IN ptr_fsdirent])
-s 0x001B2012=FS_closedir(R4 [IN handle; OUT err])
-s 0x001B453C=FS_getPathDrive(R4 [IN path; OUT err], R5 [IN for_drivename], R6 [IN ptr_ptr_rest_path])
-s 0x001B784A=SUB_double(R4 [IN aHi; OUT resHi], R5 [IN aLo; OUT resLo], R6 [IN bHi], R7 [IN bLo])
-s 0x001B7850=ADD_double(R4 [IN aHi; OUT resHi], R5 [IN aLo; OUT resLo], R6 [IN bHi], R7 [IN bLo])
-s 0x001B7A38=SUB_float(R4 [IN floatA; OUT res], R5 [IN floatB])
-s 0x001B7A3E=ADD_float(R4 [IN floatA; OUT res], R5 [IN floatB])
-s 0x001B7B2E=CMP_double(R4 [IN aHi; OUT res], R5 [IN aLo], R6 [IN bHi], R7 [IN bLo])
-s 0x001B7B60=CMP_float(R4 [IN floatA; OUT res], R5 [IN floatB])
-s 0x001B7BCE=DIV_double(R4 [IN dividendHi; OUT quotHi], R5 [IN dividendLo; OUT quotLo], R6 [IN diviHi], R7 [IN diviLo])
-s 0x001B7DD6=DIV_float(R4 [IN dividend; OUT quot], R5 [IN divisor])
-s 0x001B7E78=DIV_int(R4 [IN dividend; OUT quotient], R5 [IN divisor])
-s 0x001B7EC6=dtoi(R4 [IN doubleHi; OUT int], R5 [IN doubleLo])
-s 0x001B7F04=dtoui(R4 [IN doubleHi; OUT uint], R5 [IN doubleLo])
-s 0x001B7F42=ftod(R4 [IN float; OUT doubleHi], R5 [OUT doubleLo])
-s 0x001B7F6A=ftoi(R4 [IN float; OUT int])
-s 0x001B7FA2=ftoui(R4 [IN float; OUT uint])
-s 0x001B7FDA=itod(R4 [IN int; OUT doubleHi], R5 [OUT doubleLo])
-s 0x001B7FF4=itof(R4 [IN int; OUT float])
-s 0x001B800E=MOD_int(R4 [IN dividend; OUT remainder], R5 [IN divisor])
-s 0x001B80AA=MUL_double(R4 [IN aHi; OUT resHi], R5 [IN aLo; OUT resLo], R6 [IN bHi], R7 [IN bLo])
-s 0x001B81AE=MUL_float(R4 [IN floatA; OUT resFloat], R5 [IN floatB])
-s 0x001B8222=DIV_uint(R4 [IN dividend; OUT quotient], R5 [IN divisor])
-s 0x001B826A=uint2double(R4 [IN uint; OUT doubleHi], R5 [OUT doubleLo])
-s 0x001B82B4=uint2float(R4 [IN uint; OUT float])
-s 0x001B8306=MOD_uint(R4 [IN dividend; OUT remainder], R5 [IN divisor])
-s 0x001B834E=abs(R4 [IN value; OUT res])
-s 0x001B835C=atan2(R4 [IN doubleYHi; OUT outHi], R5 [IN doubleYLo; OUT outLo], R6 [IN doubleXHi], R7 [IN doubleXLo])
-s 0x001B84D0=atoi(R4 [IN str; OUT int])
-s 0x001B853E=ceil(R4 [IN doubleHi; OUT outHi], R5 [IN doubleLo; OUT outLo])
-s 0x001B8624=isdigit(R4 [IN char; OUT yes])
-s 0x001B8634=abs_1B8634(R4 [IN value; OUT res])
-s 0x001B8642=memcmp(R4 [IN source1; OUT res], R5 [IN source2], R6 [IN count])
-s 0x001B865C=memcpy(R4 [IN dst; OUT dst], R5 [IN source], R6 [IN count])
-s 0x001B866C=memmove(R4 [IN dst; OUT dst], R5 [IN source], R6 [IN count])
-s 0x001B868E=memset(R4 [IN dst; OUT dst], R5 [IN val], R6 [IN count])
-s 0x001B869C=pow(R4 [IN doubleXHi; OUT outHi], R5 [IN doubleXLo; OUT outLo], R6 [IN doubleYHi], R7 [IN doubleYLo])
-s 0x001B8E2A=rand(R4 [OUT value])
-s 0x001B8E62=sprintf(R4 [IN dst; OUT chars], R5 [IN formatstring], R6 [IN param3], R7 [IN param4])
-s 0x001B8EFC=sqrt(R4 [IN doubleHi; OUT outHi], R5 [IN doubleLo; OUT outLo])
-s 0x001B90DA=strcat(R4 [IN dst; OUT dst], R5 [IN src])
-s 0x001B90F4=strchr(R4 [IN ptr; OUT pos], R5 [IN char])
-s 0x001B9106=strcmp(R4 [IN str1; OUT res], R5 [IN str2]))
-s 0x001B911A=strcpy(R4 [IN dst; OUT dst], R5 [IN src])
-s 0x001B914A=strlen(R4 [IN ptr; OUT len])
-s 0x001B915A=strncat(R4 [IN dst; OUT dst], R5 [IN src], R6 [IN n])
-s 0x001B917E=strncmp(R4 [IN str1; OUT res], R5 [IN str2], R6 [IN n])
-s 0x001B919C=strncpy(R4 [IN dst; OUT dst], R5 [IN src], R6 [IN n])
-s 0x001B91BC=strstr(R4 [IN where; OUT pos], R5 [iN what])
-s 0x001B91EE=strtok(R4 [IN str; OUT ptr_token], R5 [IN ptr_delimeters])
-s 0x001B9284=strtol(R4 [IN str; OUT int], R5 [IN ptr_endptr], R6 [IN base])
-s 0x001B930E=vsprintf(R4 [IN dst; OUT chars], R5 [IN formatstring], R6 [IN va_list])
-s 0x001BA156=SHR_uint64(R4 [IN aHi; OUT resHi], R5 [IN aLo; OUT resLo], R6 [IN shiftHi], R7 [IN shiftLo])
-s 0x001BA2D4=DIV_uint64(R4 [IN dividendHi; OUT quotHi], R5 [IN dividendLo; OUT quotLo], R6 [IN divHi], R7 [IN divLo])
-s 0x001BA306=MOD_uint64(R4 [IN dividendHi; OUT remHi], R5 [IN dividendLo; OUT remLo], R6 [IN divHi], R7 [IN divLo])
-s 0x001BA340=atan(R4 [IN doubleHi; OUT outHi], R5 [IN doubleLo; OUT outLo])
-s 0x001BA6F0=CMP_int64(R4 [IN aHi; OUT res], R5 [IN aLo], R6 [IN bHi], R7 [IN bLo])
-s 0x001BA702=CMP_uint64(R4 [IN aHi; OUT res], R5 [IN aLo], R6 [IN bHi], R7 [IN bLo])
-s 0x00217EAC=BFTxx_s1_217EAC
-s 0x0021C68C=BFT10_s1
-s 0x0021CF48=BFT11_s1
-s 0x0021DDBA=BFT52_s1
-s 0x0021E622=BFTxx_s1_21E622
-s 0x00220AA4=BFTxx_s1_220AA4
-s 0x002212D2=BFT355_s1
-s 0x002220E2=BFT363_s1
-s 0x00222A5E=BFT303_s1
-s 0x00223236=BFT306_s1
-s 0x00223C2E=BFT300_s1
-s 0x00224200=BFTxx_s1_224200
-s 0x00224556=BFTxx_s1_224556
-s 0x002247D8=BFT326_s1
-s 0x00227168=BFT370_s1
-s 0x00227B7C=BFTxx_s1_227B7C
-s 0x0022859E=BFT367_s0
-s 0x002288BA=BFT368_s0
-s 0x002289F2=BFT369_s0
-s 0x00228EA4=BFTxx_s1_228EA4
-s 0x002291E0=BFTxx_s1_2291E0
-s 0x00229512=BFT121_s1
-s 0x00229AEC=BFTxx_s1_229AEC
-s 0x00229B20=BFTxx_s1_229B20
-s 0x00229DB8=BFTxx_s1_229DB8
-s 0x0022C8F6=BFT113_s0
-s 0x0022D76C=BFT121_s0
-s 0x0022D878=BFT132_s0
-s 0x0022D888=BFT143_s0
-s 0x0022D898=BFT147_s0
-s 0x0022D8A8=BFT159_s0
-s 0x0022D8B8=BFT172_s0
-s 0x0022D8C8=BFT120_s0
-s 0x0022DA4E=BFT114_s0
-s 0x0022DE8E=BFT115_s0
-s 0x0022E05A=BFTxx_s0_22E05A
-s 0x0022E084=BFT122_s0
-s 0x0022E1B0=BFT123_s0
-s 0x0022E274=BFT124_s0
-s 0x0022E3F8=BFT125_s0
-s 0x0022E62C=BFT126_s0
-s 0x0022E6F0=BFT128_s0
-s 0x0022E7B4=BFT129_s0
-s 0x0022E878=BFT131_s0
-s 0x0022EB1A=BFT133_s0
-s 0x0022EC46=BFT134_s0
-s 0x0022ED72=BFT135_s0
-s 0x0022EE9E=BFT136_s0
-s 0x0022EFC8=BFT138_s0
-s 0x0022F020=BFT139_s0
-s 0x0022F07A=BFT140_s0
-s 0x0022F07C=BFT140_s1
-s 0x0022F0D8=BFT141_s0
-s 0x0022F0DA=BFT141_s1
-s 0x0022F136=BFT142_s0
-s 0x0022F138=BFT142_s1
-s 0x0022F4CE=BFT144_s0
-s 0x0022F592=BFT145_s0
-s 0x0022F91C=BFT146_s0
-s 0x0022FC9A=BFT200_s0
-s 0x0022FCB0=BFT201_s0
-s 0x0022FEEC=BFT202_s0
-s 0x00230124=BFT203_s0
-s 0x00230360=BFT204_s0
-s 0x00230598=BFT151_s1
-s 0x0023084C=BFT152_s0
-s 0x0023098A=BFT153_s0
-s 0x00230A52=BFT154_s0
-s 0x00230B22=BFT155_s0
-s 0x00230BF0=BFT156_s0
-s 0x00230CB4=BFT161_s0
-s 0x002310F6=BFT168_s0
-s 0x002311C0=BFT169_s0
-s 0x00231346=BFT170_s0
-s 0x002314C4=BFT171_s0
-s 0x0023158E=BFT199_s0
-s 0x00231674=BFT173_s0
-s 0x0023171A=BFT174_s0
-s 0x00231850=BFT175_s0
-s 0x002319F0=BFT176_s0
-s 0x00231B3C=BFT177_s0
-s 0x00231C16=BFT178_s0
-s 0x00231D80=BFT188_s0
-s 0x00231D96=BFT189_s0
-s 0x00231E64=BFT190_s0
-s 0x00231F32=BFT191_s0
-s 0x00231FFA=BFT192_s0
-s 0x002322C0=BFT196_s0
-s 0x002322E4=BFT197_s0
-s 0x002323D8=BFT198_s0
-s 0x002324CC=BFT193_s0
-s 0x00232590=BFT194_s0
-s 0x00232664=BFT195_s0
-s 0x00232784=BFT137_s0
-s 0x0023294A=BFT148_s0
-s 0x002329B6=BFT148_s1
-s 0x00232CA6=BFT205_s0
-s 0x00232D5A=BFT150_s0
-s 0x00232FFA=BFT160_s0
-s 0x00233328=BFT179_s0
-s 0x00233514=BFT180_s0
-s 0x00233B1A=BFT181_s0
-s 0x00233E3E=BFT182_s0
-s 0x00234036=BFT183_s0
-s 0x00234662=BFT184_s0
-s 0x00234986=BFT185_s0
-s 0x00234B76=BFT186_s0
-s 0x0023520E=BFT187_s0
-s 0x002354D8=BFT127_s0
-s 0x00235604=BFT130_s0
-s 0x002356C8=BFT149_s0
-s 0x0023578C=BFT157_s0
-s 0x00235902=BFT158_s0
-s 0x00235A90=BFT162_s0
-s 0x00235B8E=BFT163_s0
-s 0x002362E2=BFT164_s0
-s 0x002362F2=BFT164_s1
-s 0x00237026=BFT165_s0
-s 0x002370E4=BFT165_s1
-s 0x00238174=BFT166_s0
-s 0x00238264=BFT167_s0
-s 0x00238CAA=BFT3_s0
-s 0x00238EDA=BFT8_s0
-s 0x0023900A=BFT15_s0
-s 0x002390B6=BFT19_s0
-s 0x0023917A=BFT18_s0
-s 0x002391B8=BFT18_s1
-s 0x0023943E=BFT20_s0
-s 0x00239440=BFT20_s1
-s 0x00239726=BFT21_s0
-s 0x002397DA=BFT22_s0
-s 0x002398E2=BFT23_s0
-s 0x00239996=BFT6_s0
-s 0x00239B30=BFT6_s1
-s 0x00239D02=BFT7_s0
-s 0x00239E60=BFTxx_s0_239E60
-s 0x00239F16=BFT9_s1
-s 0x0023A0B2=BFT12_s0
-s 0x0023A12E=BFT12_s1
-s 0x0023A76C=BFT206_s0
-s 0x0023AB1C=BFT208_s1
-s 0x0023AF08=BFT209_s0
-s 0x0023AF9C=BFT209_s1
-s 0x0023B3D4=BFT210_s0
-s 0x0023B696=BFT211_s0
-s 0x0023B6A6=BFT211_s1
-s 0x0023BCC6=BFT212_s0
-s 0x0023BDBC=BFT213_s0
-s 0x0023BFC4=BFT214_s0
-s 0x0023C0F4=BFT214_s1
-s 0x0023C528=BFT215_s0
-s 0x0023C548=BFT215_s1
-s 0x0023C9C8=BFTxx_s1_23C9C8
-s 0x0023CB2E=BFT217_s0
-s 0x0023CC3E=BFT218_s0
-s 0x0023CD24=BFT216_s1
-s 0x0023D744=BFT219_s0
-s 0x0023DD32=BFT220_s0
-s 0x0023DD52=BFT220_s1
-s 0x0023E052=BFT221_s1
-s 0x0023E15A=BFT222_s0
-s 0x0023E234=BFT223_s1
-s 0x0023EC96=BFT226_s1
-s 0x0023F834=BFT279_s0
-s 0x0023F86C=BFT279_s1
-s 0x0023FE10=BFT280_s0
-s 0x0023FE32=BFT280_s1
-s 0x002406B0=BFT281_s0
-s 0x00240764=BFT282_s0
-s 0x00241502=BFT283_s0
-s 0x002415D2=BFT284_s0
-s 0x002416B4=BFT285_s1
-s 0x00242146=BFT286_s0
-s 0x00242236=BFT207_s0
-s 0x002422F0=BFT287_s0
-s 0x0024234C=BFT287_s1
-s 0x00243022=BFT288_s0
-s 0x00243122=BFT289_s0
-s 0x00243618=BFT290_s1
-s 0x00243D88=BFT291_s0
-s 0x00243DC4=BFT291_s1
-s 0x002449AA=BFT292_s0
-s 0x00244B68=BFT293_s1
-s 0x0024500E=BFT294_s1
-s 0x002451B4=BFT295_s0
-s 0x00245280=BFT295_s1
-s 0x002454FE=BFT296_s1
-s 0x00245598=BFT297_s1
-s 0x00246032=BFT24_s0
-s 0x0024662C=BFT25_s0
-s 0x00246A20=BFT26_s0
-s 0x00246BFC=BFTxx_s0_246BFC
-s 0x00246C26=BFT31_s0
-s 0x00246C48=BFT31_s1
-s 0x0024747A=BFT32_s0
-s 0x002475CA=BFT33_s1
-s 0x00247BD8=BFT34_s0
-s 0x00247BE8=BFT34_s1
-s 0x00247F98=BFT35_s0
-s 0x0024804C=BFT36_s1
-s 0x00248546=BFT38_s0
-s 0x002488CC=BFT38_s1
-s 0x00248B1E=BFT42_s0
-s 0x00248BE4=BFT45_s0
-s 0x00248C5C=BFT46_s0
-s 0x00248D6E=BFT47_s0
-s 0x00248E38=BFT48_s0
-s 0x00249220=BFT49_s1
-s 0x0024A30A=BFT50_s0
-s 0x0024A3AE=BFT50_s1
-s 0x0024A686=BFT51_s0
-s 0x0024A952=BFT51_s1
-s 0x0024AF86=BFT53_s0
-s 0x0024B16A=BFT53_s1
-s 0x0024BAC2=BFT54_s1
-s 0x0024BC8C=BFT70_s0
-s 0x0024BD8C=BFT80_s0
-s 0x0024BF46=BFT57_s0
-s 0x0024C00C=BFT58_s0
-s 0x0024C170=BFT37_s0
-s 0x0024C416=BFT77_s0
-s 0x0024C484=BFT78_s0
-s 0x0024C548=BFT79_s0
-s 0x0024C668=BFT73_s0
-s 0x0024C812=BFTxx_s1_24C812
-s 0x0024CB64=BFT74_s1
-s 0x0024CE98=BFT75_s0
-s 0x0024CFB0=BFT76_s1
-s 0x0024EF60=BFT39_s0
-s 0x0024EF80=BFT40_s0
-s 0x0024F04A=BFT41_s0
-s 0x0024F0AE=BFT41_s1
-s 0x0024F92A=BFT59_s0
-s 0x0024F9A4=BFT62_s0
-s 0x0024FA76=BFT61_s0
-s 0x0024FB48=BFT60_s0
-s 0x0024FC1A=BFT63_s0
-s 0x0024FC70=BFTxx_s1_24FC70
-s 0x0024FD6E=BFT66_s0
-s 0x0024FE34=BFT65_s0
-s 0x0024FEFC=BFT64_s0
-s 0x0024FFC4=BFT67_s0
-s 0x00250A88=BFT82_s0
-s 0x00250EC4=BFTxx_s1_250EC4
-s 0x00251756=BFT83_s0
-s 0x0025187A=BFT84_s0
-s 0x00251962=BFT85_s0
-s 0x00251A4E=BFT86_s0
-s 0x00251B38=BFT87_s0
-s 0x0025293C=BFTxx_s1_25293C
-s 0x00255FEC=BFT88_s0
-s 0x00256140=BFT89_s0
-s 0x00256414=BFT106_s0
-s 0x0025652A=BFT90_s0
-s 0x00256688=BFT91_s0
-s 0x002567DE=BFT97_s0
-s 0x002568C0=BFT98_s0
-s 0x00256988=BFT99_s0
-s 0x00256A64=BFT104_s0
-s 0x00256CDE=BFT105_s0
-s 0x00256EFC=BFT104_s1
-s 0x002574F0=BFT105_s1
-s 0x00257946=BFT112_s0
-s 0x002579F4=BFT112_s1
-s 0x00257BEC=BFT92_s0
-s 0x00257D16=BFT93_s0
-s 0x00257E04=BFT94_s0
-s 0x00257F02=BFT95_s0
-s 0x00257FF8=BFT96_s0
-s 0x002580E6=BFTxx_s1_2580E6
-s 0x00258926=BFT107_s1
-s 0x00258BAE=BFT108_s1
-s 0x00258CBA=BFT109_s0
-s 0x00258D50=BFT109_s1
-s 0x00259476=BFT100_s0
-s 0x002595C6=BFT111_s0
-s 0x00259896=BFTxx_s1_259896
-s 0x00259F8C=BFT111_s1
-s 0x0025A406=BFTxx_s0_25A406
-s 0x0025A834=BFT102_s1
-s 0x0025AE8C=BFT81_s0
-s 0x002616A0=BFTxx_s0_2616A0
-s 0x002616B2=BFT2_s1
-s 0x00269322=BFTxx_s1_269322
-s 0x002694E6=BFTxx_s1_2694E6
-s 0x00269AE6=BFT352_s0
-s 0x00269BC2=BFT353_s0
-s 0x00269BCE=BFT354_s0
-s 0x00269BDA=BFT355_s0
-s 0x00269BE6=BFT366_s1
-s 0x00269D44=BFT356_s0
-s 0x00269F28=BFT357_s0
-s 0x0026A168=BFT358_s0
-s 0x0026A24C=BFT359_s1
-s 0x0026A5B0=BFT360_s0
-s 0x0026A69A=BFT361_s0
-s 0x0026A75E=BFT362_s0
-s 0x0026A7C2=BFT364_s0
-s 0x0026A7C4=BFT364_s1
-s 0x0026ABF0=BFT365_s0
-s 0x0026AC20=BFT365_s1
-s 0x0026BBC0=BFT268_s1
-s 0x0026BF6E=BFT269_s0
-s 0x0026BF98=BFT227_s0
-s 0x0026C1BC=BFT227_s1
-s 0x0026CF2A=BFT228_s0
-s 0x0026D1B2=BFT262_s0
-s 0x0026D2F4=BFT263_s0
-s 0x0026D3A8=BFT264_s0
-s 0x0026D484=BFT265_s0
-s 0x0026D538=BFT266_s1
-s 0x0026D8CC=BFT267_s0
-s 0x0026D97C=BFTxx_s1_26D97C
-s 0x0026DBCA=BFT270_s0
-s 0x0026DE18=BFT271_s1
-s 0x0026E11E=BFT272_s1
-s 0x0026E372=BFT273_s0
-s 0x0026E3C2=BFT273_s1
-s 0x0026E7D0=BFT274_s0
-s 0x0026E7F2=BFT274_s1
-s 0x0026EDB8=BFT275_s0
-s 0x0026EEE2=BFT276_s0
-s 0x0026F09C=BFT277_s0
-s 0x0026F2B8=BFT278_s0
-s 0x0026F64C=BFT229_s0
-s 0x0026F78C=BFT229_s1
-s 0x00270CA8=BFT230_s0
-s 0x002710A2=BFT231_s0
-s 0x002712D6=BFT232_s0
-s 0x00271CB8=BFTxx_s0_271CB8
-s 0x00271D6E=BFT233_s1
-s 0x00271DE4=BFT234_s0
-s 0x00271F5C=BFT235_s0
-s 0x00272040=BFT235_s1
-s 0x002722BE=BFT236_s1
-s 0x00272304=BFT237_s0
-s 0x002723EE=BFT238_s1
-s 0x002728F2=BFT240_s0
-s 0x00272AC6=BFT241_s0
-s 0x00273046=BFT242_s1
-s 0x00273626=BFT243_s1
-s 0x00273702=BFT244_s1
-s 0x00273804=BFT245_s1
-s 0x00273A98=BFT246_s0
-s 0x00273B5C=BFT246_s1
-s 0x00273E28=BFT247_s1
-s 0x00273E50=BFT248_s1
-s 0x00273FE2=BFT249_s0
-s 0x00274072=BFT249_s1
-s 0x0027439E=BFT250_s1
-s 0x002743C0=BFT251_s1
-s 0x002743E2=BFT252_s0
-s 0x0027444E=BFT252_s1
-s 0x00274578=BFT253_s1
-s 0x002745BC=BFT254_s1
-s 0x00274602=BFT255_s1
-s 0x00274642=BFT256_s0
-s 0x0027473A=BFT256_s1
-s 0x00274846=BFT257_s1
-s 0x0027488E=BFT258_s1
-s 0x00274908=BFT259_s0
-s 0x002749C0=BFT259_s1
-s 0x00274AD2=BFT260_s1
-s 0x00274B1A=BFT261_s1
-s 0x00276C8A=BFT298_s0
-s 0x00276EBE=BFT308_s0
-s 0x00276F48=BFT318_s0
-s 0x00276FAC=BFT328_s0
-s 0x00277024=BFT328_s1
-s 0x00277AA0=BFT329_s0
-s 0x002788A4=BFT330_s0
-s 0x00278DBE=BFT330_s1
-s 0x00278EBC=BFT331_s0
-s 0x002790CA=BFTxx_s0_2790CA
-s 0x002790D2=BFTxx_s1_2790D2
-s 0x00279474=BFT335_s0
-s 0x0027951A=BFTxx_s0_27951A
-s 0x00279558=BFT349_s0
-s 0x0027960E=BFT349_s1
-s 0x00279E44=BFT350_s0
-s 0x00279F04=BFT350_s1
-s 0x0027AF06=BFT351_s0
-s 0x9F0249A0=FlashCheckDeviceID()
-s 0x9F024A72=FlashWriteFirmwareOrSettings()
-s 0x9F024D44=FlashClear(R4 [IN addr; OUT bool_ok],R5 [IN size])
-s 0x9F024DCC=FlashWrite(R4 [IN dstAddr], R5 [IN srcAddr], R6 [IN size])
-s 0x9F024F26=FlashEraseSectors(R4 [IN ptr; OUT bool_ok], R5 [IN size])
-s 0x9F025004=FlashProgramHalfword(R4 [IN addr],R5 [IN hword])
