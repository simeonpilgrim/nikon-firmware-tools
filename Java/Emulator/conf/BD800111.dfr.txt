# The main part of this file describes the D80 "B" firmware, ver 1.011
#
# Use in Emulator or
# startDfr.bat -wstructure -wparameters -wint40 -wmemory -waddress -whexcode -x bd800111.dfr.txt -o bd800111.asm bd800111.bin

############################### File map
-i 0x00040000-0x003FFFFF=0x00000000

# copied data
# at 0x00040944 copied size 0x00016E98
#-i 0x9E50BEAC-0x9E522D43=0x00425E04
# at 0x00040968 copied size 0x00000020
#-i 0x6800380C-0x6800382B=0x0044EED8
# at 0x001122EA copied size 0x000110D0
#-i 0x9E522D44-0x9E533E13=0x0043CC9C
# at 0x000409B0 copied size 0x0000116E
#-i 0x9F1A4C90-0x9F1A5DFD=0x0044DD68

############################### Memory map

-e 0x000ECDFA
-m 0x00040000-0x000C60F3=CODE

# startup
-m 0x000ECDFA-0x000ED26D=CODE

# Table of offsets used by INT 0x40 :
-m 0x000ED26E-0x000ED3CD=DATA:W

-m 0x000ED3CE-0x000ED4AB=CODE

# Softune RTOS Copyright :
-m 0x000ED4AC-0x000ED517=DATA:L

# ITRON kernel code
-m 0x000ED518-0x000EF629=CODE

# tblTaskData
-m 0x16E080-0x16E3CB=DATA:L

# Interrupt vector table.
-t 0x000EFC00

# application code
-m 0x00120000-0x00153E27=CODE

-m 0x0015E4A8-0x0016AC67=CODE

-m 0x00348350-0x0035A915=CODE

############################### Symbols

# syscalls
-s 0x000ED3CE=sys_unsupported_function (R12 [OUT err_code])
-s 0x000ED3D2=sys_reserved_function (R12 [OUT err_code])
-s 0x000EDC4C=sys_set_tim(R4 [IN ptr_to_pk_tim], R12 [OUT err_code] /* Set System Clock */)
-s 0x000EDC6A=sys_get_tim(R4 [IN ptr_to_pk_tim], R12 [OUT err_code] /* Get System Clock */)
-s 0x000EDC88=sys_dly_tsk(R4 [IN dly_tim], R12 [OUT err_code] /* Delay Task */)
-s 0x000EDCE4=sys_def_cyc(R4 [IN cycno], R5 [IN ptr_to_pk_dcyc], R12 [OUT err_code] /* Define Cyclic Handler */)
-s 0x000EDD62=sys_act_cyc(R4 [IN cycno], R5 [IN cycact], R12 [OUT err_code] /* Activate Cyclic Handler */)
-s 0x000EDDC8=sys_ref_cyc(R4 [IN ptr_to_pk_rcyc], R5 [IN cycno], R12 [OUT err_code] /* Get Cyclic Handler Status */)
-s 0x000EDE4A=sys_def_alm(R4 [IN almno], R5 [IN ptr_to_pk_dalm], R12 [OUT err_code] /* Define Alarm Handler */)
-s 0x000EDED8=sys_ref_alm(R4 [IN ptr_to_pk_ralm], R5 [IN almno], R12 [OUT err_code] /* Get Alarm Handler Status */)
-s 0x000EDF4A=sys_sus_tsk(R4 [IN tsk_id], R12 [OUT err_code] /* Suspend Other Task */)
-s 0x000EDFCE=sys_rsm_tsk(R4 [IN tsk_id], R12 [OUT err_code] /* Resume Suspended Task */)
-s 0x000EE056=sys_frsm_tsk(R4 [IN tsk_id], R12 [OUT err_code] /* Forcibly Resume suspended Task */)
-s 0x000EE0B6=sys_slp_tsk(R12 [OUT err_code] /* Sleep Task */)
-s 0x000EE0EC=sys_tslp_tsk(R4 [IN timeout], R12 [OUT err_code] /* Sleep Task with Timeout */)
-s 0x000EE170=sys_wup_tsk(R4 [IN tsk_id], R12 [OUT err_code] /* Wakeup Other Task */)
-s 0x000EE1D2=sys_can_wup(R4 [IN tsk_id], R12 [OUT err_code], R13 [OUT wakeup_count] /* Cancel Wakeup Request */)
-s 0x000EE236=sys_sta_tsk(R4 [IN tsk_id], R5 [IN tsk_param], R12 [OUT err_code] /* Start Task */)
-s 0x000EE2B4=sys_ext_tsk(R12 [OUT err_code] /* Exit Issuing Task */)
-s 0x000EE30E=sys_ter_tsk(R4 [IN tsk_id], R12 [OUT err_code] /* Terminate Other Task */)
-s 0x000EE3AC=sys_dis_dsp(R12 [OUT err_code] /* Disable Dispatch */)
-s 0x000EE3CE=sys_ena_dsp(R12 [OUT err_code] /* Enable Dispatch */)
-s 0x000EE3EA=sys_chg_pri(R4 [IN tsk_id], R5 [IN tsk_prio], R12 [OUT err_code] /* Change Task Priority */)
-s 0x000EE452=sys_rot_rdq(R4 [IN tsk_prio], R12 [OUT err_code] /* Rotate Tasks on the Ready Queue */)
-s 0x000EE4B8=sys_rel_wai(R4 [IN tsk_id], R12 [OUT err_code] /* Release Wait of Other Task */)
-s 0x000EE53A=sys_get_tid(R12 [OUT err_code], R13 [OUT tsk_id] /* Get Task Identifier */)
-s 0x000EE55A=sys_ref_tsk(R4 [IN ptr_to_pk_rtsk], R5 [IN tsk_id], R12 [OUT err_code] /* Get Task Status */)
-s 0x000EE62E=sys_sig_sem(R4 [IN sem_id], R12 [OUT err_code] /* Signal Semaphore */)
-s 0x000EE670=sys_wai_sem(R4 [IN sem_id], R12 [OUT err_code] /* Wait on Semaphore */)
-s 0x000EE6B2=sys_preq_sem(R4 [IN sem_id], R12 [OUT err_code] /* Poll and request Semaphore */)
-s 0x000EE6E6=sys_twai_sem(R4 [IN sem_id], R5 [IN timeout], R12 [OUT err_code] /* Wait on Semaphore with Timeout */)
-s 0x000EE76C=sys_ref_sem(R4 [IN ptr_to_pk_rsem], R5 [IN sem_id], R12 [OUT err_code] /* Get Semaphore Status */)
-s 0x000EE7B6=sys_set_flg(R4 [IN flag_id], R5 [IN set_pattern], R12 [OUT err_code] /* Set Eventflag */)
-s 0x000EE850=sys_clr_flg(R4 [IN flag_id], R5 [IN clr_pattern], R12 [OUT err_code] /* Clear Eventflag */)
-s 0x000EE878=sys_wai_flg(R5 [IN flag_id], R6 [IN wai_pattern], R7 [IN wait_flag_mode], R12 [OUT err_code], R13 [OUT flag_pattern] /* Wait for Eventflag */)
-s 0x000EE900=sys_pol_flg(R5 [IN flag_id], R6 [IN wai_pattern], R7 [IN wait_flag_mode], R12 [OUT err_code], R13 [OUT flag_pattern] /* Wait for Eventflag, polling */)
-s 0x000EE958=sys_twai_flg(R5 [IN flag_id], R6 [IN wai_pattern], R7 [IN wait_flag_mode], R12 [OUT err_code], R13 [IN timeout; OUT flag_pattern] /* Wait for Eventflag, with Timeout */)
-s 0x000EEA16=sys_ref_flg(R4 [IN ptr_to_pk_rflg], R5 [IN flag_id], R12 [OUT err_code] /* Get Eventflag Status */)
-s 0x000EEA4C=sys_snd_msg(R4 [IN mailbox_id], R5 [IN ptr_to_pk_msg], R12 [OUT err_code] /* Send Message to Mailbox */)
-s 0x000EEAA6=sys_rcv_msg(R5 [IN mailbox_id], R12 [OUT err_code], R13 [OUT ptr_to_pk_msg] /* Receive Message from Mailbox */)
-s 0x000EEAF6=sys_prcv_msg(R5 [IN mailbox_id], R12 [OUT err_code], R13 [OUT ptr_to_pk_msg] /* Receive Message from Mailbox, polling */)
-s 0x000EEB44=sys_trcv_msg(R5 [IN mailbox_id], R6 [IN timeout], R12 [OUT err_code], R13 [OUT ptr_to_pk_msg] /* Receive Message from Mailbox, with Timeout */)
-s 0x000EEBC6=sys_ref_mbx(R4 [IN ptr_to_pk_rmbx], R5 [IN mailbox_id], R12 [OUT err_code] /* Get Mailbox Status */)
-s 0x000EEC4A=sys_get_blk(R5 [IN mempool_id], R6 [IN blk_size], R12 [OUT err_code], R13 [OUT blk_start] /* Get Variable-Sized Memory Block */)
-s 0x000EED3E=sys_pget_blk(R5 [IN mempool_id], R6 [IN blk_size], R12 [OUT err_code], R13 [OUT blk_start] /* Get Variable-Sized Memory Block, polling */)
-s 0x000EEE3E=sys_rel_blk(R4 [IN mempool_id], R5 [OUT blk_start], R12 [OUT err_code] /* Release Variable-Sized Memory Block */)
-s 0x000EEFFC=sys_ref_mpl(R4 [IN ptr_to_pk_rmempool], R5 [IN mempool_id], R12 [OUT err_code] /* Get Variable-Sized Memorypool Status */)
-s 0x000EF076=sys_get_blf(R5 [IN mempool_f_id], R12 [OUT err_code], R13 [OUT blk_f_start] /* Get Fixed-Sized Memory Block */)
-s 0x000EF0D2=sys_pget_blf(R5 [IN mempool_f_id], R12 [OUT err_code], R13 [OUT blk_f_start] /* Poll and Get Fixed-Sized Memory Block */)
-s 0x000EF116=sys_tget_blf(R5 [IN mempool_f_id], R6 [IN timeout], R12 [OUT err_code], R13 [OUT blk_f_start] /* Get Fixed-Sized Memory Block with Timeout */)
-s 0x000EF1B8=sys_rel_blf(R4 [IN mempool_f_id], R5 [IN ptr; OUT blk_f_start], R12 [OUT err_code] /* Release Fixed-Sized Memory Block */)
-s 0x000EF286=sys_ref_mpf(R4 [IN ptr_to_pk_rmempool_f], R5 [IN mempool_f_id], R12 [OUT err_code] /* Get Fixed-Sized Memorypool Status */)
-s 0x000EF2C2=sys_loc_cpu(R12 [OUT err_code] /* Lock CPU */)
-s 0x000EF2D6=sys_unl_cpu(R12 [OUT err_code] /* Unlock CPU */)
-s 0x000EF2EA=sys_chg_ilm(R4 [IN ilmask], R12 [OUT err_code] /* Change Interrupt Level Mask */)
-s 0x000EF312=sys_ref_ilm(R12 [OUT err_code], R13 [OUT ilmask] /* Get Interrupt Level Mask */)
-s 0x000EF336=sys_get_ver(R4 [IN ptr_to_pk_ver], R12 [OUT err_code] /* Get Version Information */)
-s 0x000EF372=sys_ref_sys(R4 [IN ptr_to_pk_rsys], R12 [OUT err_code] /* Get System Status */)

# tasks
-s 0x000ED61A=SetupTCB
-s 0x000ED518=StartIdleTask

-s 0x00071F24=task_0x01(R4 [IN param])
-s 0x0009CADE=task_0x02(R4 [IN param])
-s 0x000400C8=task_0x03(R4 [IN param] /* Autorun */)
-s 0x00046B48=task_0x04(R4 [IN param])
-s 0x00047A34=task_0x05(R4 [IN param])
-s 0x000472DC=task_0x06(R4 [IN param])
-s 0x0004F588=task_0x07(R4 [IN param])
-s 0x0004BDD4=task_0x08(R4 [IN param])
-s 0x0004BF4A=task_0x09(R4 [IN param])
-s 0x0004C528=task_0x0A(R4 [IN param])
-s 0x0007C204=task_0x0B(R4 [IN param])
-s 0x0007C250=task_0x0C(R4 [IN param])
-s 0x00049FBE=task_0x0D(R4 [IN param])
-s 0x00050F32=task_0x0E(R4 [IN param])
-s 0x0014FB58=task_0x0F(R4 [IN param])
-s 0x0012301E=task_0x10(R4 [IN param])
-s 0x0006D9D6=task_0x11(R4 [IN param])
-s 0x0009ACAE=task_0x12(R4 [IN param])
-s 0x0007D242=task_0x13(R4 [IN param])
-s 0x00092BE8=task_0x14(R4 [IN param])
-s 0x0008E1DA=task_0x15(R4 [IN param])
-s 0x0009075C=task_0x16(R4 [IN param])
-s 0x0009AF3C=task_0x17(R4 [IN param])
-s 0x0009D412=task_0x18(R4 [IN param])
-s 0x0009D414=task_0x19(R4 [IN param])
-s 0x0004BA12=task_0x1A(R4 [IN param])
-s 0x68005A1C=task_0x1B(R4 [IN param])
-s 0x000A4668=task_0x1C(R4 [IN param])
-s 0x000A505A=task_0x1D(R4 [IN param])
-s 0x000A6A06=task_0x1E(R4 [IN param])

# for Emulator
-s 0x0016E080=tblTaskData
-s 0x68000000=pCurrentTCB

# other
-s 0x000EE5AE=krnl_TableGetRecord(R14 [IN ptr_table; OUT ptr_record], R4 [IN index_1_based])
-s 0x000ED7B2=UpdateClock_ms()
-s 0x000C3266=SUB_double(R4 [IN aHi; OUT resHi], R5 [IN aLo; OUT resLo], R6 [IN bHi], R7 [IN bLo])
-s 0x000C326C=ADD_double(R4 [IN aHi; OUT resHi], R5 [IN aLo; OUT resLo], R6 [IN bHi], R7 [IN bLo])
-s 0x000C3454=SUB_float(R4 [IN floatA; OUT res], R5 [IN floatB])
-s 0x000C345A=ADD_float(R4 [IN floatA; OUT res], R5 [IN floatB])
-s 0x000C354A=CMP_double(R4 [IN aHi; OUT res], R5 [IN aLo], R6 [IN bHi], R7 [IN bLo])
-s 0x000C357C=CMP_float(R4 [IN floatA; OUT res], R5 [IN floatB])
-s 0x000C5F64=CMP_int64(R4 [IN aHi; OUT res], R5 [IN aLo], R6 [IN bHi], R7 [IN bLo])
-s 0x000C5F76=CMP_uint64(R4 [IN aHi; OUT res], R5 [IN aLo], R6 [IN bHi], R7 [IN bLo])
-s 0x000C35EA=DIV_double(R4 [IN dividendHi; OUT quotHi], R5 [IN dividendLo; OUT quotLo], R6 [IN diviHi], R7 [IN diviLo])
-s 0x000C37F2=DIV_float(R4 [IN dividend; OUT quot], R5 [IN divisor])
-s 0x000C3894=DIV_int(R4 [IN dividend; OUT quotient], R5 [IN divisor])
-s 0x000C3942=dtoi(R4 [IN doubleHi; OUT int], R5 [IN doubleLo])
-s 0x000C3980=dtoui(R4 [IN doubleHi; OUT uint], R5 [IN doubleLo])
-s 0x000C39BE=ftod(R4 [IN float; OUT doubleHi], R5 [OUT doubleLo])
-s 0x000C39E6=ftoi(R4 [IN float; OUT int])
-s 0x000C3A1E=ftoui(R4 [IN float; OUT uint])
-s 0x000C3A56=itod(R4 [IN int; OUT doubleHi], R5 [OUT doubleLo])
-s 0x000C3A70=itof(R4 [IN int; OUT float])
-s 0x000C3A8A=MOD_int(R4 [IN dividend; OUT remainder], R5 [IN divisor])
-s 0x000C3B26=MUL_double(R4 [IN aHi; OUT resHi], R5 [IN aLo; OUT resLo], R6 [IN bHi], R7 [IN bLo])
-s 0x000C3C2A=MUL_float(R4 [IN floatA; OUT resFloat], R5 [IN floatB])
-s 0x000C5D6E=SHR_uint64(R4 [IN aHi; OUT resHi], R5 [IN aLo; OUT resLo], R6 [IN shiftHi], R7 [IN shiftLo])
-s 0x000C5EE6=SUB_uint64(R4 [IN aHi; OUT resHi], R5 [IN aLo; OUT resLo], R6 [IN bHi], R7 [IN bLo])
-s 0x000C3C9E=DIV_uint(R4 [IN dividend; OUT quotient], R5 [IN divisor])
-s 0x000C5EEC=DIV_uint64(R4 [IN dividendHi; OUT quotHi], R5 [IN dividendLo; OUT quotLo], R6 [IN divHi], R7 [IN divLo])
-s 0x000C3CE6=uint2double(R4 [IN uint; OUT doubleHi], R5 [OUT doubleLo])
-s 0x000C3D30=uint2float(R4 [IN uint; OUT float])
-s 0x000C3D82=MOD_uint(R4 [IN dividend; OUT remainder], R5 [IN divisor])
-s 0x000C5F1E=MOD_uint64(R4 [IN dividendHi; OUT remHi], R5 [IN dividendLo; OUT remLo], R6 [IN divHi], R7 [IN divLo])
-s 0x000C3DD8=atoi(R4 [IN str; OUT int])
-s 0x000C3E46=ceil(R4 [IN doubleHi; OUT outHi], R5 [IN doubleLo; OUT outLo])
-s 0x000C3DCA=abs(R4 [IN value; OUT res])
-s 0x000C407E=abs_C407E(R4 [IN value; OUT res])
-s 0x000C409E=memcmp(R4 [IN source1; OUT res], R5 [IN source2], R6 [IN count])
-s 0x000C40B8=memcpy(R4 [IN dst; OUT dst], R5 [IN source], R6 [IN count])
-s 0x000C40C8=memmove(R4 [IN dst; OUT dst], R5 [IN source], R6 [IN count])
-s 0x000C40EA=memset(R4 [IN dst; OUT dst], R5 [IN val], R6 [IN count])
-s 0x000C40F8=pow(R4 [IN doubleXHi; OUT outHi], R5 [IN doubleXLo; OUT outLo], R6 [IN doubleYHi], R7 [IN doubleYLo])
-s 0x000C49B4=rand(R4 [OUT value])
-s 0x000C49EC=sqrt(R4 [IN doubleHi; OUT outHi], R5 [IN doubleLo; OUT outLo])
-s 0x000C4BCA=strcat(R4 [IN dst; OUT dst], R5 [IN src])
-s 0x000C4BE4=strchr(R4 [IN ptr; OUT pos], R5 [IN char])
-s 0x000C4BF6=strcmp(R4 [IN str1; OUT res], R5 [IN str2]))
-s 0x000C4C0A=strcpy(R4 [IN dst; OUT dst], R5 [IN src])
-s 0x000C4C18=strlen(R4 [IN ptr; OUT len])
-s 0x000C4C28=strncat(R4 [IN dst; OUT dst], R5 [IN src], R6 [IN n])
-s 0x000C4C4C=strncmp(R4 [IN str1; OUT res], R5 [IN str2], R6 [IN n])
-s 0x000C4C6A=strncpy(R4 [IN dst; OUT dst], R5 [IN src], R6 [IN n])
-s 0x000C4C8A=strstr(R4 [IN where; OUT pos], R5 [iN what])
-s 0x000C4CBC=strtok(R4 [IN str; OUT ptr_token], R5 [IN ptr_delimeters])
-s 0x000C4D52=strtol(R4 [IN str; OUT int], R5 [IN ptr_endptr], R6 [IN base])
-s 0x000C4DDE=vsprintf(R4 [IN dst; OUT chars], R5 [IN formatstring], R6 [IN va_list])
-s 0x000461DA=crc16(R4 [IN size; OUT crc16], R5 [IN ptr_buf])
-s 0x0004575C=dlist_init(R4 [IN ptr_to_list] /*creates sentinel node at the beginning*/)
-s 0x00045764=dlist_is_empty(R4 [IN ptr_to_element; OUT is_empty] )
-s 0x00045770=dlist_insert_before(R4 [IN ptr_to_element], R5 [IN ptr_to_new_element] /*insert R5 before R4*/)
-s 0x00045780=dlist_insert_after(R4 [IN ptr_to_element], R5 [IN ptr_to_new_element] /*insert R5 after R4*/)
-s 0x00045790=dlist_remove(R4 [IN ptr_to_element] /*remove R4 element*/)
-s 0x000457A0=dlist_remove_previous(R4 [IN ptr_to_element] /*remove item before R4*/)
-s 0x000457B6=dlist_remove_next(R4 [IN ptr_to_element] /*remove item after R4*/)
-s 0x000460F6=LowPriority_WaitSem(R4 [IN sem_id])
-s 0x00046134=LowPriority_SigSem(R4 [IN sem_id])
-s 0x0008D48C=getHalfWord_LE(R4 [IN ptr; OUT halfword])
-s 0x0008D4BC=getWord_LE(R4 [IN ptr; OUT halfword])
-s 0x00046736=EncryptData(R4 [IN ptr_data], R5 [IN size], R6 [IN IV], R7 [IN ptr_key])
-s 0x000467EA=memcpy_fast(R4 [IN dst], R5 [IN src], R6 [IN count])
-s 0x0004681C=memset_word(R4 [IN dst], R5 [IN word], R6 [IN countBytes])
-s 0x0004684C=memset_fast(R4 [IN dst], R5 [IN byte], R6 [IN count])
